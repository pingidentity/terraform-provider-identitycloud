// Code generated by ping-terraform-plugin-framework-generator

package cookiedomains_test

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/pingidentity/terraform-provider-identitycloud/internal/acctest"
	"github.com/pingidentity/terraform-provider-identitycloud/internal/provider"
)

func TestAccCookieDomains_MinimalMaximal(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"identitycloud": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: cookieDomains_MinimalHCL(),
				Check:  cookieDomains_CheckComputedValuesMinimal(),
			},
			{
				// Update to a complete model. No computed values to check.
				Config: cookieDomains_CompleteHCL(),
			},
			{
				// Test importing the resource
				Config:                               cookieDomains_CompleteHCL(),
				ResourceName:                         "identitycloud_cookie_domains.example",
				ImportStateVerifyIdentifierAttribute: "domains.#",
				ImportState:                          true,
				ImportStateVerify:                    true,
			},
			{
				// Back to minimal model
				Config: cookieDomains_MinimalHCL(),
				Check:  cookieDomains_CheckComputedValuesMinimal(),
			},
		},
	})
}

// Minimal HCL with only required values set
func cookieDomains_MinimalHCL() string {
	return `
resource "identitycloud_cookie_domains" "example" {
}
`
}

// Maximal HCL with all values set where possible
func cookieDomains_CompleteHCL() string {
	return `
resource "identitycloud_cookie_domains" "example" {
  domains = ["example.com", "example2.com"]
}
`
}

// Validate any computed values when applying minimal HCL
func cookieDomains_CheckComputedValuesMinimal() resource.TestCheckFunc {
	return resource.TestCheckResourceAttr("identitycloud_cookie_domains.example", "domains.#", "0")
}
