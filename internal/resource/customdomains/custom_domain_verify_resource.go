// Code generated by ping-terraform-plugin-framework-generator

package customdomains

import (
	"context"
	"net/http"
	"time"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	client "github.com/pingidentity/identitycloud-go-client/identitycloud"
	"github.com/pingidentity/terraform-provider-identitycloud/internal/auth"
	"github.com/pingidentity/terraform-provider-identitycloud/internal/providererror"
	internaltypes "github.com/pingidentity/terraform-provider-identitycloud/internal/types"
	"github.com/sethvargo/go-retry"
)

var (
	_ resource.Resource              = &customDomainVerifyResource{}
	_ resource.ResourceWithConfigure = &customDomainVerifyResource{}
)

func CustomDomainVerifyResource() resource.Resource {
	return &customDomainVerifyResource{}
}

type customDomainVerifyResource struct {
	apiClient   *client.APIClient
	accessToken string
}

func (r *customDomainVerifyResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_custom_domain_verify"
}

func (r *customDomainVerifyResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	resourceConfig, ok := req.ProviderData.(internaltypes.ResourceConfiguration)
	if !ok {
		resp.Diagnostics.AddError(providererror.InternalProviderError, "Invalid ProviderData when configuring resource. Please report this error in the provider's issue tracker.")
		return
	}
	r.apiClient = resourceConfig.ApiClient
	r.accessToken = resourceConfig.AccessToken
}

type customDomainVerifyResourceModel struct {
	Name     types.String   `tfsdk:"name"`
	Timeouts timeouts.Value `tfsdk:"timeouts"`
	Verified types.Bool     `tfsdk:"verified"`
}

func (r *customDomainVerifyResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "Resource to verify a custom domain.",
		Attributes: map[string]schema.Attribute{
			"timeouts": timeouts.Attributes(ctx, timeouts.Opts{
				Create:            true,
				CreateDescription: "A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as \"30s\" or \"2h45m\", as a time to wait for DNS record changes to propagate for verification. Valid time units are \"s\" (seconds), \"m\" (minutes), \"h\" (hours). The default is 1 minute.",
			}),
			"name": schema.StringAttribute{
				Required:    true,
				Description: "The canonical name of the domain to be validated.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.LengthAtLeast(1),
				},
			},
			"verified": schema.BoolAttribute{
				Computed:    true,
				Description: "True if the domain was verified, false otherwise.",
			},
		},
	}
}

func (model *customDomainVerifyResourceModel) buildClientStruct() (*client.CName, diag.Diagnostics) {
	result := &client.CName{}
	// name
	result.Name = model.Name.ValueString()
	return result, nil
}

func isFailedCnameValidation(aicError *providererror.AicErrorResponse) bool {
	return aicError != nil && aicError.Code == 400 && aicError.Message == "CNAME validation failed"
}

// Returns true if the request should be retried
func (state *customDomainVerifyResourceModel) readClientResponseShouldRetry(ctx context.Context, httpResp *http.Response, err error, diags *diag.Diagnostics) bool {
	// verified
	if err == nil {
		state.Verified = types.BoolValue(true)
		return false
	}

	aicError, respBody := providererror.ReadErrorResponse(ctx, httpResp)
	if isFailedCnameValidation(aicError) {
		state.Verified = types.BoolValue(false)
		return true
	} else if !diags.HasError() {
		providererror.ReportHttpErrorBody(ctx, diags, "An error occurred while verifying the custom domain", err, respBody)
	}
	return false
}

func (r *customDomainVerifyResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data customDomainVerifyResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)
	// Retry up to the time limit on create
	createTimeout, diags := data.Timeouts.Create(ctx, 1*time.Minute)
	resp.Diagnostics.Append(diags...)

	if resp.Diagnostics.HasError() {
		return
	}

	clientData, diags := data.buildClientStruct()
	resp.Diagnostics.Append(diags...)
	apiUpdateRequest := r.apiClient.CustomDomainsAPI.VerifyCustomDomains(auth.AuthContext(ctx, r.accessToken))
	apiUpdateRequest = apiUpdateRequest.Action("verify")
	apiUpdateRequest = apiUpdateRequest.Body(*clientData)

	retries := retry.NewFibonacci(1 * time.Second)
	retries = retry.WithMaxDuration(createTimeout, retries)
	retry.Do(ctx, retries, func(ctx context.Context) error {
		httpResp, httpErr := r.apiClient.CustomDomainsAPI.VerifyCustomDomainsExecute(apiUpdateRequest)
		if data.readClientResponseShouldRetry(ctx, httpResp, httpErr, &resp.Diagnostics) {
			return retry.RetryableError(httpErr)
		}
		return httpErr
	})

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *customDomainVerifyResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data customDomainVerifyResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	clientData, diags := data.buildClientStruct()
	resp.Diagnostics.Append(diags...)
	apiUpdateRequest := r.apiClient.CustomDomainsAPI.VerifyCustomDomains(auth.AuthContext(ctx, r.accessToken))
	apiUpdateRequest = apiUpdateRequest.Action("verify")
	apiUpdateRequest = apiUpdateRequest.Body(*clientData)
	httpResp, err := r.apiClient.CustomDomainsAPI.VerifyCustomDomainsExecute(apiUpdateRequest)

	// Read response into the model
	data.readClientResponseShouldRetry(ctx, httpResp, err, &resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *customDomainVerifyResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	// This resource can't be updated
}

func (r *customDomainVerifyResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	// This resource doesn't represent a resource on the service, so no delete logic is necessary
}
