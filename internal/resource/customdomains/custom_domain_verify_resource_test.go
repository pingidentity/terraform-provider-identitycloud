// Code generated by ping-terraform-plugin-framework-generator

package customdomains_test

import (
	"fmt"
	"os"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/pingidentity/terraform-provider-identitycloud/internal/acctest"
	"github.com/pingidentity/terraform-provider-identitycloud/internal/provider"
)

func TestAccCustomDomainVerify_MinimalMaximal(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"identitycloud": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: customDomainVerify_MinimalHCL(),
				Check:  customDomainVerify_CheckComputedValuesMinimal(),
			},
			{
				// Update to a complete model.
				Config: customDomainVerify_CompleteHCL(),
				Check:  customDomainVerify_CheckComputedValuesComplete(),
			},
			{
				// Back to minimal model
				Config: customDomainVerify_MinimalHCL(),
				Check:  customDomainVerify_CheckComputedValuesMinimal(),
			},
		},
	})
}

// Minimal HCL with only required values set
func customDomainVerify_MinimalHCL() string {
	return fmt.Sprintf(`
resource "identitycloud_custom_domain_verify" "example" {
  name = "%s"
}
`, os.Getenv("PINGAIC_TF_TENANT_ENV_FQDN"))
}

// Maximal HCL with all values set where possible
func customDomainVerify_CompleteHCL() string {
	return `
resource "identitycloud_custom_domain_verify" "example" {
  name = "example.com"
  timeouts = {
    create = "5s"
  }
}
`
}

// Validate any computed values when applying minimal HCL
func customDomainVerify_CheckComputedValuesMinimal() resource.TestCheckFunc {
	return resource.TestCheckResourceAttr("identitycloud_custom_domain_verify.example", "verified", "true")
}

// Validate any computed values when applying compute HCL
func customDomainVerify_CheckComputedValuesComplete() resource.TestCheckFunc {
	return resource.TestCheckResourceAttr("identitycloud_custom_domain_verify.example", "verified", "false")
}
