// Code generated by ping-terraform-plugin-framework-generator

package secrets_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	"github.com/pingidentity/terraform-provider-identitycloud/internal/acctest"
	"github.com/pingidentity/terraform-provider-identitycloud/internal/provider"
)

const secretSecretId = "esv-testsecret"

func TestAccSecret_RemovalDrift(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"identitycloud": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: secret_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: secret_MinimalHCL(),
			},
			{
				// Delete the resource on the service, outside of terraform, verify that a non-empty plan is generated
				PreConfig: func() {
					secret_Delete(t)
				},
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
			},
		},
	})
}

func TestAccSecret_MinimalMaximal(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"identitycloud": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: secret_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: secret_MinimalHCL(),
				Check:  secret_CheckComputedValuesMinimal(),
			},
			{
				// Delete the minimal model
				Config:  secret_MinimalHCL(),
				Destroy: true,
			},
			{
				// Re-create with a complete model
				Config: secret_CompleteHCL(),
				Check:  secret_CheckComputedValuesComplete(),
			},
			{
				// Back to minimal model
				Config: secret_MinimalHCL(),
				Check:  secret_CheckComputedValuesMinimal(),
			},
			{
				// Back to complete model
				Config: secret_CompleteHCL(),
				Check:  secret_CheckComputedValuesComplete(),
			},
			{
				// Test importing the resource
				Config:                               secret_CompleteHCL(),
				ResourceName:                         "identitycloud_secret.example",
				ImportStateId:                        secretSecretId,
				ImportStateVerifyIdentifierAttribute: "secret_id",
				ImportState:                          true,
				ImportStateVerify:                    true,
				// The value of the secret is not returned by the API
				ImportStateVerifyIgnore: []string{"value_base64"},
			},
		},
	})
}

// Minimal HCL with only required values set
func secret_MinimalHCL() string {
	return fmt.Sprintf(`
resource "identitycloud_secret" "example" {
  secret_id = "%s"
  encoding = "generic"
  use_in_placeholders = false
  value_base64 = base64encode("examplesecret")
}
`, secretSecretId)
}

// Maximal HCL with all values set where possible
func secret_CompleteHCL() string {
	return fmt.Sprintf(`
resource "identitycloud_secret" "example" {
  secret_id = "%s"
  description = "my example secret"
  encoding = "generic"
  use_in_placeholders = false
  value_base64 = base64encode("examplesecretupdated")
}
`, secretSecretId)
}

// Validate any computed values when applying minimal HCL
func secret_CheckComputedValuesMinimal() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("identitycloud_secret.example", "active_version", "1"),
		resource.TestCheckResourceAttr("identitycloud_secret.example", "description", ""),
		resource.TestCheckResourceAttr("identitycloud_secret.example", "id", secretSecretId),
		resource.TestCheckResourceAttrSet("identitycloud_secret.example", "last_change_date"),
		resource.TestCheckResourceAttr("identitycloud_secret.example", "last_changed_by", "tf-provider-testing"),
		resource.TestCheckResourceAttr("identitycloud_secret.example", "loaded", "true"),
		resource.TestCheckResourceAttr("identitycloud_secret.example", "loaded_version", "1"),
	)
}

// Validate any computed values when applying complete HCL
func secret_CheckComputedValuesComplete() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("identitycloud_secret.example", "active_version", "1"),
		resource.TestCheckResourceAttr("identitycloud_secret.example", "id", secretSecretId),
		resource.TestCheckResourceAttrSet("identitycloud_secret.example", "last_change_date"),
		resource.TestCheckResourceAttr("identitycloud_secret.example", "last_changed_by", "tf-provider-testing"),
		resource.TestCheckResourceAttr("identitycloud_secret.example", "loaded", "true"),
		resource.TestCheckResourceAttr("identitycloud_secret.example", "loaded_version", "1"),
	)
}

// Delete the resource
func secret_Delete(t *testing.T) {
	testClient := acctest.Client()
	_, _, err := testClient.SecretsAPI.DeleteSecret(acctest.AuthContext(), secretSecretId).Execute()
	if err != nil {
		t.Fatalf("Failed to delete config: %v", err)
	}
}

// Test that any objects created by the test are destroyed
func secret_CheckDestroy(s *terraform.State) error {
	testClient := acctest.Client()
	_, _, err := testClient.SecretsAPI.DeleteSecret(acctest.AuthContext(), secretSecretId).Execute()
	if err == nil {
		return fmt.Errorf("secret still exists after tests. Expected it to be destroyed")
	}
	return nil
}
