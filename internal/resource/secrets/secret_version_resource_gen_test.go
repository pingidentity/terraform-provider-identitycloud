// Code generated by ping-terraform-plugin-framework-generator

package secrets_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/pingidentity/terraform-provider-identitycloud/internal/acctest"
	"github.com/pingidentity/terraform-provider-identitycloud/internal/provider"
)

const secretVersionSecretId = "esv-secretversiontest"
const secretVersionVersionId = "1"

func TestAccSecretVersion_RemovalDrift(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"identitycloud": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: secret_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: secretVersion_MinimalHCLMultiple(),
			},
			{
				// Delete the resource on the service, outside of terraform, verify that a non-empty plan is generated
				PreConfig: func() {
					secretVersion_Delete(t)
				},
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
			},
		},
	})
}

func TestAccSecretVersion_MinimalMaximal(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"identitycloud": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: secretVersion_MinimalHCL(),
				Check:  secretVersion_CheckComputedValuesMinimal(),
			},
			{
				// Delete the minimal model
				Config:  secretVersion_MinimalHCL(),
				Destroy: true,
			},
			{
				// Re-create with a complete model
				Config: secretVersion_CompleteHCL("ENABLED"),
				Check:  secretVersion_CheckComputedValuesComplete(),
			},
			{
				// Back to minimal model
				Config: secretVersion_MinimalHCL(),
				Check:  secretVersion_CheckComputedValuesMinimal(),
			},
			{
				// Back to complete model
				Config: secretVersion_CompleteHCL("ENABLED"),
				Check:  secretVersion_CheckComputedValuesComplete(),
			},
			{
				// Test updating the status
				Config: secretVersion_CompleteHCL("DISABLED"),
				Check:  secretVersion_CheckComputedValuesComplete(),
			},
			{
				// Test importing the resource
				Config:                               secretVersion_CompleteHCL("DISABLED"),
				ResourceName:                         "identitycloud_secret_version.exampletwo",
				ImportStateId:                        secretVersionSecretId + "/5",
				ImportStateVerifyIdentifierAttribute: "version_id",
				ImportState:                          true,
				ImportStateVerify:                    true,
				// The value of the secret can't be imported
				ImportStateVerifyIgnore: []string{"value_base64"},
			},
		},
	})
}

// Minimal HCL with only required values set
func secretVersion_MinimalHCLMultiple() string {
	return fmt.Sprintf(`
resource "identitycloud_secret" "example" {
  secret_id = "%s"
  encoding = "generic"
  use_in_placeholders = false
  value_base64 = base64encode("examplesecret")
}

resource "identitycloud_secret_version" "example" {
  secret_id = identitycloud_secret.example.secret_id
  value_base64 = base64encode("examplesecretupdated")
}

resource "identitycloud_secret_version" "exampletwo" {
depends_on = [identitycloud_secret_version.example]
  secret_id = identitycloud_secret.example.secret_id
  value_base64 = base64encode("examplesecretupdatedagain")
}
`, secretVersionSecretId)
}

// Minimal HCL with only required values set
func secretVersion_MinimalHCL() string {
	return fmt.Sprintf(`
resource "identitycloud_secret" "example" {
  secret_id = "%s"
  encoding = "generic"
  use_in_placeholders = false
  value_base64 = base64encode("examplesecret")
}

resource "identitycloud_secret_version" "example" {
  secret_id = identitycloud_secret.example.secret_id
  value_base64 = base64encode("examplesecretupdated")
}
`, secretVersionSecretId)
}

// Maximal HCL with all values set where possible
func secretVersion_CompleteHCL(status string) string {
	return fmt.Sprintf(`
resource "identitycloud_secret" "example" {
	secret_id = "%s"
	encoding = "generic"
	use_in_placeholders = false
  value_base64 = base64encode("examplesecret")
  }
  
resource "identitycloud_secret_version" "example" {
	secret_id = identitycloud_secret.example.secret_id
  value_base64 = base64encode("examplesecretanother")
	status = "%s"
  }

resource "identitycloud_secret_version" "exampletwo" {
depends_on = [identitycloud_secret_version.example]
  secret_id = identitycloud_secret.example.secret_id
  value_base64 = base64encode("examplesecretupdatedagain")
}
`, secretVersionSecretId, status)
}

// Validate any computed values when applying minimal HCL
func secretVersion_CheckComputedValuesMinimal() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttrSet("identitycloud_secret_version.example", "create_date"),
		resource.TestCheckResourceAttrSet("identitycloud_secret_version.example", "version_id"),
		resource.TestCheckResourceAttr("identitycloud_secret_version.example", "loaded", "false"),
		resource.TestCheckResourceAttr("identitycloud_secret_version.example", "status", "ENABLED"),
	)
}

// Validate any computed values when applying complete HCL
func secretVersion_CheckComputedValuesComplete() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttrSet("identitycloud_secret_version.example", "create_date"),
		resource.TestCheckResourceAttrSet("identitycloud_secret_version.example", "version_id"),
		resource.TestCheckResourceAttr("identitycloud_secret_version.example", "loaded", "false"),
	)
}

// Delete the resource
func secretVersion_Delete(t *testing.T) {
	testClient := acctest.Client()
	_, _, err := testClient.SecretsAPI.DeleteSecretVersion(acctest.AuthContext(), secretVersionSecretId, secretVersionVersionId).Execute()
	if err != nil {
		t.Fatalf("Failed to delete config: %v", err)
	}
}
