// Code generated by ping-terraform-plugin-framework-generator

package secrets

import (
	"context"
	"fmt"
	"net/http"
	"regexp"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	client "github.com/pingidentity/identitycloud-go-client/identitycloud"
	"github.com/pingidentity/terraform-provider-identitycloud/internal/auth"
	"github.com/pingidentity/terraform-provider-identitycloud/internal/providererror"
	internaltypes "github.com/pingidentity/terraform-provider-identitycloud/internal/types"
)

var (
	_ resource.Resource                = &secretVersionResource{}
	_ resource.ResourceWithConfigure   = &secretVersionResource{}
	_ resource.ResourceWithImportState = &secretVersionResource{}
)

func SecretVersionResource() resource.Resource {
	return &secretVersionResource{}
}

type secretVersionResource struct {
	apiClient   *client.APIClient
	accessToken string
}

func (r *secretVersionResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_secret_version"
}

func (r *secretVersionResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	resourceConfig, ok := req.ProviderData.(internaltypes.ResourceConfiguration)
	if !ok {
		resp.Diagnostics.AddError(providererror.InternalProviderError, "Invalid ProviderData when configuring resource. Please report this error in the provider's issue tracker.")
		return
	}
	r.apiClient = resourceConfig.ApiClient
	r.accessToken = resourceConfig.AccessToken
}

type secretVersionResourceModel struct {
	CreateDate types.String `tfsdk:"create_date"`
	Loaded     types.Bool   `tfsdk:"loaded"`
	SecretId   types.String `tfsdk:"secret_id"`
	Status     types.String `tfsdk:"status"`
	VersionId  types.String `tfsdk:"version_id"`
}

func (r *secretVersionResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "Resource to manage the status of a version of a secret.",
		Attributes: map[string]schema.Attribute{
			"create_date": schema.StringAttribute{
				Description: "The date the secret version was created",
				Computed:    true,
			},
			"loaded": schema.BoolAttribute{
				Description: "Whether the secret version is loaded.",
				Computed:    true,
			},
			"secret_id": schema.StringAttribute{
				Required:    true,
				Description: "ID of the secret",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^esv-[a-z0-9_-]{1,124}$"), ""),
				},
			},
			"status": schema.StringAttribute{
				Optional:    true,
				Computed:    true,
				Default:     stringdefault.StaticString("ENABLED"),
				Description: "The status of the secret version. Either `DISABLED`, `ENABLED`, or `DESTROYED`.",
				Validators: []validator.String{
					stringvalidator.OneOf("DISABLED", "ENABLED", "DESTROYED"),
				},
			},
			"version_id": schema.StringAttribute{
				Required:    true,
				Description: "ID of the secret version. Will match the pattern `^latest$|^[0-9]+$`.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^latest$|^[0-9]+$"), ""),
				},
			},
		},
	}
}

func (model *secretVersionResourceModel) buildClientStruct() (*client.EsvSecretVersionStatusRequest, diag.Diagnostics) {
	result := &client.EsvSecretVersionStatusRequest{}
	// value_base64
	result.Status = model.Status.ValueString()
	return result, nil
}

func (state *secretVersionResourceModel) readClientResponse(response *client.EsvSecretVersionResponse) diag.Diagnostics {
	// create_date
	state.CreateDate = types.StringValue(response.CreateDate.Format(time.RFC3339))
	// loaded
	state.Loaded = types.BoolValue(response.Loaded)
	// status
	state.Status = types.StringValue(response.Status)
	// version
	state.VersionId = types.StringValue(response.Version)
	return nil
}

func (r *secretVersionResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data secretVersionResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	var responseData *client.EsvSecretVersionResponse
	var httpResp *http.Response
	var err error
	if data.Status.ValueString() == "DESTROYED" {
		// Delete API call logic
		apiUpdateRequest := r.apiClient.SecretsAPI.DeleteSecretVersion(auth.AuthContext(ctx, r.accessToken), data.SecretId.ValueString(), data.VersionId.ValueString())
		responseData, httpResp, err = r.apiClient.SecretsAPI.DeleteSecretVersionExecute(apiUpdateRequest)
		if err != nil {
			providererror.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while updating the secretVersion", err, httpResp)
			return
		}
	} else {
		// Update API call logic
		clientData, diags := data.buildClientStruct()
		resp.Diagnostics.Append(diags...)
		apiUpdateRequest := r.apiClient.SecretsAPI.ChangeSecretVersion(auth.AuthContext(ctx, r.accessToken), data.SecretId.ValueString(), data.VersionId.ValueString())
		apiUpdateRequest = apiUpdateRequest.Body(*clientData)
		apiUpdateRequest = apiUpdateRequest.Action("changestatus")
		responseData, httpResp, err = r.apiClient.SecretsAPI.ChangeSecretVersionExecute(apiUpdateRequest)
		if err != nil {
			providererror.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while updating the secretVersion", err, httpResp)
			return
		}
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *secretVersionResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data secretVersionResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read API call logic
	responseData, httpResp, err := r.apiClient.SecretsAPI.GetSecretVersion(auth.AuthContext(ctx, r.accessToken), data.SecretId.ValueString(), data.VersionId.ValueString()).Execute()
	if err != nil {
		if httpResp != nil && httpResp.StatusCode == 404 {
			providererror.AddResourceNotFoundWarning(ctx, &resp.Diagnostics, "secretVersion", httpResp)
			resp.State.RemoveResource(ctx)
		} else {
			providererror.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while reading the secretVersion", err, httpResp)
		}
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *secretVersionResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data secretVersionResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	var responseData *client.EsvSecretVersionResponse
	var httpResp *http.Response
	var err error
	if data.Status.ValueString() == "DESTROYED" {
		// Delete API call logic
		apiUpdateRequest := r.apiClient.SecretsAPI.DeleteSecretVersion(auth.AuthContext(ctx, r.accessToken), data.SecretId.ValueString(), data.VersionId.ValueString())
		responseData, httpResp, err = r.apiClient.SecretsAPI.DeleteSecretVersionExecute(apiUpdateRequest)
		if err != nil {
			providererror.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while updating the secretVersion", err, httpResp)
			return
		}
	} else {
		// Update API call logic
		clientData, diags := data.buildClientStruct()
		resp.Diagnostics.Append(diags...)
		apiUpdateRequest := r.apiClient.SecretsAPI.ChangeSecretVersion(auth.AuthContext(ctx, r.accessToken), data.SecretId.ValueString(), data.VersionId.ValueString())
		apiUpdateRequest = apiUpdateRequest.Body(*clientData)
		apiUpdateRequest = apiUpdateRequest.Action("changestatus")
		responseData, httpResp, err = r.apiClient.SecretsAPI.ChangeSecretVersionExecute(apiUpdateRequest)
		if err != nil {
			providererror.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while updating the secretVersion", err, httpResp)
			return
		}
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *secretVersionResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data secretVersionResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// This resource will just be removed from terraform state
	resp.Diagnostics.AddWarning(providererror.DeletedNotRemovedWarning,
		fmt.Sprintf("Secret version '%s' for secret '%s' still exists in the tenant, but has been removed from terraform state.",
			data.VersionId.ValueString(), data.SecretId.ValueString()))
}

func (r *secretVersionResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	split := strings.Split(req.ID, "/")
	if len(split) != 2 {
		resp.Diagnostics.AddError("Invalid import id for resource", "Expected [secret_id]/[version_id]. Got: "+req.ID)
		return
	}
	// Set the required attributes to read the resource
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("secret_id"), split[0])...)
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("version_id"), split[1])...)
}
