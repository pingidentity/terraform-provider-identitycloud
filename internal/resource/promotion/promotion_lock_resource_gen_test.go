// Copyright Â© 2025 Ping Identity Corporation

// Code generated by ping-terraform-plugin-framework-generator

package promotion_test

import (
	"errors"
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	"github.com/pingidentity/terraform-provider-identitycloud/internal/acctest"
	"github.com/pingidentity/terraform-provider-identitycloud/internal/provider"
)

var promotionId string

func TestAccPromotionLock_MinimalMaximal(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"identitycloud": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: promotionLock_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: promotionLock_MinimalHCL(true),
				Check: resource.ComposeTestCheckFunc(
					promotionLock_CheckComputedValuesMinimal(),
					getPromotionId(),
				),
			},
			{
				// Test importing the resource
				Config:                               promotionLock_MinimalHCL(false),
				ResourceName:                         "identitycloud_promotion_lock.example",
				ImportStateVerifyIdentifierAttribute: "id",
				ImportState:                          true,
				ImportStateVerify:                    true,
				// Timeouts aren't read from the API
				ImportStateVerifyIgnore: []string{"retry_timeouts"},
			},
		},
	})
}

// Minimal HCL with only required values set
func promotionLock_MinimalHCL(includeDataSource bool) string {
	result := `
resource "identitycloud_promotion_lock" "example" {
  retry_timeouts = {
    create = "9m"
	delete = "9m"
  }
}

`
	if includeDataSource {
		result += `
data "identitycloud_promotion_lock" "example" {
  depends_on = [identitycloud_promotion_lock.example]
}
`
	}
	return result
}

// Validate any computed values when applying minimal HCL
func promotionLock_CheckComputedValuesMinimal() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("identitycloud_promotion_lock.example", "description", "Environment lock in progress"),
		resource.TestCheckResourceAttrSet("identitycloud_promotion_lock.example", "lower_env.promotion_id"),
		resource.TestCheckResourceAttr("identitycloud_promotion_lock.example", "lower_env.proxy_state", "locked"),
		resource.TestCheckResourceAttr("identitycloud_promotion_lock.example", "lower_env.state", "locking"),
		resource.TestCheckResourceAttrSet("identitycloud_promotion_lock.example", "promotion_id"),
		resource.TestCheckResourceAttrSet("identitycloud_promotion_lock.example", "id"),
		resource.TestCheckResourceAttr("identitycloud_promotion_lock.example", "result", "locking"),
		resource.TestCheckResourceAttrSet("identitycloud_promotion_lock.example", "upper_env.promotion_id"),
		resource.TestCheckResourceAttr("identitycloud_promotion_lock.example", "upper_env.proxy_state", "locked"),
		resource.TestCheckResourceAttr("identitycloud_promotion_lock.example", "upper_env.state", "locking"),
		resource.TestCheckResourceAttr("data.identitycloud_promotion_lock.example", "description", "Environment lock in progress"),
		resource.TestCheckResourceAttrSet("data.identitycloud_promotion_lock.example", "lower_env.promotion_id"),
		resource.TestCheckResourceAttr("data.identitycloud_promotion_lock.example", "lower_env.proxy_state", "locked"),
		resource.TestCheckResourceAttr("data.identitycloud_promotion_lock.example", "lower_env.state", "locking"),
		resource.TestCheckResourceAttrSet("data.identitycloud_promotion_lock.example", "promotion_id"),
		resource.TestCheckResourceAttrSet("data.identitycloud_promotion_lock.example", "id"),
		resource.TestCheckResourceAttr("data.identitycloud_promotion_lock.example", "result", "locking"),
		resource.TestCheckResourceAttrSet("data.identitycloud_promotion_lock.example", "upper_env.promotion_id"),
		resource.TestCheckResourceAttr("data.identitycloud_promotion_lock.example", "upper_env.proxy_state", "locked"),
		resource.TestCheckResourceAttr("data.identitycloud_promotion_lock.example", "upper_env.state", "locking"),
	)
}

// Test that any objects created by the test are destroyed
func promotionLock_CheckDestroy(s *terraform.State) error {
	testClient := acctest.Client()
	_, _, err := testClient.PromotionAPI.Unlock(acctest.AuthContext(), promotionId).Execute()
	if err == nil {
		return fmt.Errorf("promotion_lock still exists after tests. Expected it to be destroyed")
	}
	return nil
}

// Get the promotion id from terraform state
func getPromotionId() resource.TestCheckFunc {
	return func(s *terraform.State) error {
		ms := s.RootModule()
		rs, ok := ms.Resources["identitycloud_promotion_lock.example"]
		if !ok {
			return errors.New("Not found: identitycloud_promotion_lock.example")
		}

		is := rs.Primary
		if is == nil {
			return errors.New("No primary instance found")
		}

		v, ok := is.Attributes["id"]

		if !ok {
			return errors.New("No id attribute found")
		}

		promotionId = v
		return nil
	}
}
