// Code generated by ping-terraform-plugin-framework-generator

package promotion

import (
	"context"
	"net/http"
	"time"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	client "github.com/pingidentity/identitycloud-go-client/identitycloud"
	"github.com/pingidentity/terraform-provider-identitycloud/internal/auth"
	"github.com/pingidentity/terraform-provider-identitycloud/internal/providererror"
	internaltypes "github.com/pingidentity/terraform-provider-identitycloud/internal/types"
	"github.com/sethvargo/go-retry"
)

var (
	_ resource.Resource                = &promotionLockResource{}
	_ resource.ResourceWithConfigure   = &promotionLockResource{}
	_ resource.ResourceWithImportState = &promotionLockResource{}
)

func PromotionLockResource() resource.Resource {
	return &promotionLockResource{}
}

type promotionLockResource struct {
	apiClient                 *client.APIClient
	accessToken               *string
	serviceAccountTokenSource *client.ServiceAccountTokenSource
}

func (r *promotionLockResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_promotion_lock"
}

func (r *promotionLockResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	resourceConfig, ok := req.ProviderData.(internaltypes.ResourceConfiguration)
	if !ok {
		resp.Diagnostics.AddError(providererror.InternalProviderError, "Invalid ProviderData when configuring resource. Please report this error in the provider's issue tracker.")
		return
	}
	r.apiClient = resourceConfig.ApiClient
	r.accessToken = resourceConfig.AccessToken
	r.serviceAccountTokenSource = resourceConfig.ServiceAccountConfig
}

type promotionLockResourceModel struct {
	Description   types.String   `tfsdk:"description"`
	LowerEnv      types.Object   `tfsdk:"lower_env"`
	PromotionId   types.String   `tfsdk:"promotion_id"`
	Id            types.String   `tfsdk:"id"`
	Result        types.String   `tfsdk:"result"`
	UpperEnv      types.Object   `tfsdk:"upper_env"`
	RetryTimeouts timeouts.Value `tfsdk:"retry_timeouts"`
}

func (r *promotionLockResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "Resource to create and manage the promotion lock process.",
		Attributes: map[string]schema.Attribute{
			"description": schema.StringAttribute{
				Computed:    true,
				Description: "Description of the state of the lock.",
			},
			"lower_env": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"promotion_id": schema.StringAttribute{
						Computed:    true,
						Description: "Promotion unique identifier.",
					},
					"proxy_state": schema.StringAttribute{
						Computed:    true,
						Description: "Proxy state of the lock.",
					},
					"state": schema.StringAttribute{
						Computed:    true,
						Description: "State of the lock.",
					},
				},
				Computed:    true,
				Description: "Lower environment lock status.",
			},
			"promotion_id": schema.StringAttribute{
				Computed:    true,
				Description: "Promotion unique identifier.",
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: "Promotion unique identifier.",
			},
			"result": schema.StringAttribute{
				Computed:    true,
				Description: "The lock status of the environment. Supported values are `unlocking`, `unlocked`, `locking`, `locked`, `error`.",
			},
			"upper_env": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"promotion_id": schema.StringAttribute{
						Computed:    true,
						Description: "Promotion unique identifier.",
					},
					"proxy_state": schema.StringAttribute{
						Computed:    true,
						Description: "Proxy state of the lock.",
					},
					"state": schema.StringAttribute{
						Computed:    true,
						Description: "State of the lock.",
					},
				},
				Computed:    true,
				Description: "Upper environment lock status.",
			},
			"retry_timeouts": timeouts.Attributes(ctx, timeouts.Opts{
				Create:            true,
				CreateDescription: "A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as \"30s\" or \"2h45m\", as a grace period for retries on locking of the environment. Valid time units are \"s\" (seconds), \"m\" (minutes), \"h\" (hours). The default is 1 minute.",
				Delete:            true,
				DeleteDescription: "A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as \"30s\" or \"2h45m\", as a grace period for retries on unlocking of the environment. Valid time units are \"s\" (seconds), \"m\" (minutes), \"h\" (hours). The default is 1 minute.",
			}),
		},
	}
}

func (state *promotionLockResourceModel) readClientResponse(response *client.PromotionLockState) diag.Diagnostics {
	var respDiags, diags diag.Diagnostics
	// description
	state.Description = types.StringPointerValue(response.Description)
	// lower_env
	lowerEnvAttrTypes := map[string]attr.Type{
		"promotion_id": types.StringType,
		"proxy_state":  types.StringType,
		"state":        types.StringType,
	}
	var lowerEnvValue types.Object
	if response.LowerEnv == nil {
		lowerEnvValue = types.ObjectNull(lowerEnvAttrTypes)
	} else {
		lowerEnvValue, diags = types.ObjectValue(lowerEnvAttrTypes, map[string]attr.Value{
			"promotion_id": types.StringPointerValue(response.LowerEnv.PromotionId),
			"proxy_state":  types.StringPointerValue(response.LowerEnv.ProxyState),
			"state":        types.StringPointerValue(response.LowerEnv.State),
		})
		respDiags.Append(diags...)
	}

	state.LowerEnv = lowerEnvValue
	// promotion_id
	state.PromotionId = types.StringPointerValue(response.PromotionId)
	// id
	state.Id = types.StringPointerValue(response.PromotionId)
	// result
	state.Result = types.StringPointerValue(response.Result)
	// upper_env
	upperEnvAttrTypes := map[string]attr.Type{
		"promotion_id": types.StringType,
		"proxy_state":  types.StringType,
		"state":        types.StringType,
	}
	var upperEnvValue types.Object
	if response.UpperEnv == nil {
		upperEnvValue = types.ObjectNull(upperEnvAttrTypes)
	} else {
		upperEnvValue, diags = types.ObjectValue(upperEnvAttrTypes, map[string]attr.Value{
			"promotion_id": types.StringPointerValue(response.UpperEnv.PromotionId),
			"proxy_state":  types.StringPointerValue(response.UpperEnv.ProxyState),
			"state":        types.StringPointerValue(response.UpperEnv.State),
		})
		respDiags.Append(diags...)
	}

	state.UpperEnv = upperEnvValue
	return respDiags
}

// Set all non-primitive attributes to null with appropriate attribute types
func (r *promotionLockResource) emptyModel() promotionLockResourceModel {
	var model promotionLockResourceModel
	envAttrTypes := map[string]attr.Type{
		"promotion_id": types.StringType,
		"proxy_state":  types.StringType,
		"state":        types.StringType,
	}
	model.LowerEnv = types.ObjectNull(envAttrTypes)
	model.UpperEnv = types.ObjectNull(envAttrTypes)
	model.RetryTimeouts = timeouts.Value{
		Object: types.ObjectNull(map[string]attr.Type{
			"create": types.StringType,
			"delete": types.StringType,
		}),
	}
	return model
}

func (r *promotionLockResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data promotionLockResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)
	// Retry up to the timeout on create
	createTimeout, diags := data.RetryTimeouts.Create(ctx, 1*time.Minute)
	resp.Diagnostics.Append(diags...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Lock API call logic
	apiCreateRequest := r.apiClient.PromotionAPI.Lock(auth.AuthContext(ctx, r.accessToken, r.serviceAccountTokenSource))
	apiCreateRequest = apiCreateRequest.AcceptAPIVersion("protocol=1.0,resource=1.0")

	retries := retry.NewFibonacci(1 * time.Second)
	retries = retry.WithMaxDuration(createTimeout, retries)
	var httpResp *http.Response
	var err error
	finalErr := retry.Do(ctx, retries, func(ctx context.Context) error {
		tflog.Warn(ctx, "Environment lock attempt")
		_, httpResp, err = r.apiClient.PromotionAPI.LockExecute(apiCreateRequest)
		if err != nil && httpResp != nil && httpResp.StatusCode == 409 {
			tflog.Warn(ctx, "Environment lock retryable error: "+err.Error())
			return retry.RetryableError(err)
		}
		return err
	})

	if finalErr != nil {
		providererror.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while locking the environment", err, httpResp)
		return
	}

	// Read the lock status after creating the lock
	responseData, httpResp, err := r.apiClient.PromotionAPI.CheckLock(auth.AuthContext(ctx, r.accessToken, r.serviceAccountTokenSource)).AcceptAPIVersion("protocol=1.0,resource=1.0").Execute()
	if err != nil {
		providererror.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while reading the promotionLock", err, httpResp)
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *promotionLockResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data promotionLockResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read API call logic
	responseData, httpResp, err := r.apiClient.PromotionAPI.CheckLock(auth.AuthContext(ctx, r.accessToken, r.serviceAccountTokenSource)).AcceptAPIVersion("protocol=1.0,resource=1.0").Execute()
	if err != nil {
		providererror.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while reading the promotionLock", err, httpResp)
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *promotionLockResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	// Only the timeouts attribute can be updated
	var plan, data promotionLockResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	data.RetryTimeouts = plan.RetryTimeouts

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *promotionLockResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data promotionLockResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	// Retry up to the timeout on delete
	deleteTimeout, diags := data.RetryTimeouts.Delete(ctx, 1*time.Minute)
	resp.Diagnostics.Append(diags...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Unlock API call logic
	retries := retry.NewFibonacci(1 * time.Second)
	retries = retry.WithMaxDuration(deleteTimeout, retries)
	var httpResp *http.Response
	var err error
	finalErr := retry.Do(ctx, retries, func(ctx context.Context) error {
		tflog.Warn(ctx, "Environment unlock attempt")
		_, httpResp, err = r.apiClient.PromotionAPI.Unlock(auth.AuthContext(ctx, r.accessToken, r.serviceAccountTokenSource), data.PromotionId.ValueString()).AcceptAPIVersion("protocol=1.0,resource=1.0").Execute()
		if err != nil && httpResp != nil && httpResp.StatusCode == 409 {
			tflog.Warn(ctx, "Environment unlock retryable error: "+err.Error())
			return retry.RetryableError(err)
		}
		return err
	})

	if finalErr != nil && (httpResp == nil || httpResp.StatusCode != 404) {
		providererror.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while unlocking the environment", err, httpResp)
	}
}

func (r *promotionLockResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	// This resource has no identifier attributes, so the value passed in here doesn't matter. Just return an empty state struct.
	emptyState := r.emptyModel()
	resp.Diagnostics.Append(resp.State.Set(ctx, &emptyState)...)
}
