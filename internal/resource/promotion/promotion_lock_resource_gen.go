// Code generated by ping-terraform-plugin-framework-generator

package promotion

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	client "github.com/pingidentity/identitycloud-go-client/identitycloud"
	"github.com/pingidentity/terraform-provider-identitycloud/internal/auth"
	"github.com/pingidentity/terraform-provider-identitycloud/internal/providererror"
	internaltypes "github.com/pingidentity/terraform-provider-identitycloud/internal/types"
)

var (
	_ resource.Resource                = &promotionLockResource{}
	_ resource.ResourceWithConfigure   = &promotionLockResource{}
	_ resource.ResourceWithImportState = &promotionLockResource{}
)

func PromotionLockResource() resource.Resource {
	return &promotionLockResource{}
}

type promotionLockResource struct {
	apiClient   *client.APIClient
	accessToken string
}

func (r *promotionLockResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_promotion_lock"
}

func (r *promotionLockResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	resourceConfig, ok := req.ProviderData.(internaltypes.ResourceConfiguration)
	if !ok {
		resp.Diagnostics.AddError(providererror.InternalProviderError, "Invalid ProviderData when configuring resource. Please report this error in the provider's issue tracker.")
		return
	}
	r.apiClient = resourceConfig.ApiClient
	r.accessToken = resourceConfig.AccessToken
}

type promotionLockResourceModel struct {
	Description types.String `tfsdk:"description"`
	LowerEnv    types.Object `tfsdk:"lower_env"`
	PromotionId types.String `tfsdk:"promotion_id"`
	Result      types.String `tfsdk:"result"`
	UpperEnv    types.Object `tfsdk:"upper_env"`
}

func (r *promotionLockResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "Resource to create and manage the promotion lock process.",
		Attributes: map[string]schema.Attribute{
			"description": schema.StringAttribute{
				Computed:    true,
				Description: "Error description, if applicable.",
			},
			"lower_env": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"promotion_id": schema.StringAttribute{
						Computed:    true,
						Description: "Promotion unique identifier.",
					},
					"proxy_state": schema.StringAttribute{
						Computed: true,
					},
					"state": schema.StringAttribute{
						Computed: true,
					},
				},
				Computed:    true,
				Description: "Lower environment lock status.",
			},
			"promotion_id": schema.StringAttribute{
				Computed:    true,
				Description: "Promotion unique identifier.",
			},
			"result": schema.StringAttribute{
				Computed:    true,
				Description: "The lock status of the environment. Supported values are `unlocking`, `unlocked`, `locking`, `locked`, `error`.",
			},
			"upper_env": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"promotion_id": schema.StringAttribute{
						Computed:    true,
						Description: "Promotion unique identifier.",
					},
					"proxy_state": schema.StringAttribute{
						Computed: true,
					},
					"state": schema.StringAttribute{
						Computed: true,
					},
				},
				Computed:    true,
				Description: "Upper environment lock status.",
			},
		},
	}
}

func (state *promotionLockResourceModel) readClientResponse(response *client.PromotionLockState) diag.Diagnostics {
	var respDiags, diags diag.Diagnostics
	// description
	state.Description = types.StringPointerValue(response.Description)
	// lower_env
	lowerEnvAttrTypes := map[string]attr.Type{
		"promotion_id": types.StringType,
		"proxy_state":  types.StringType,
		"state":        types.StringType,
	}
	var lowerEnvValue types.Object
	if response.LowerEnv == nil {
		lowerEnvValue = types.ObjectNull(lowerEnvAttrTypes)
	} else {
		lowerEnvValue, diags = types.ObjectValue(lowerEnvAttrTypes, map[string]attr.Value{
			"promotion_id": types.StringPointerValue(response.LowerEnv.PromotionId),
			"proxy_state":  types.StringPointerValue(response.LowerEnv.ProxyState),
			"state":        types.StringPointerValue(response.LowerEnv.State),
		})
		respDiags.Append(diags...)
	}

	state.LowerEnv = lowerEnvValue
	// promotion_id
	state.PromotionId = types.StringPointerValue(response.PromotionId)
	// result
	state.Result = types.StringPointerValue(response.Result)
	// upper_env
	upperEnvAttrTypes := map[string]attr.Type{
		"promotion_id": types.StringType,
		"proxy_state":  types.StringType,
		"state":        types.StringType,
	}
	var upperEnvValue types.Object
	if response.UpperEnv == nil {
		upperEnvValue = types.ObjectNull(upperEnvAttrTypes)
	} else {
		upperEnvValue, diags = types.ObjectValue(upperEnvAttrTypes, map[string]attr.Value{
			"promotion_id": types.StringPointerValue(response.UpperEnv.PromotionId),
			"proxy_state":  types.StringPointerValue(response.UpperEnv.ProxyState),
			"state":        types.StringPointerValue(response.UpperEnv.State),
		})
		respDiags.Append(diags...)
	}

	state.UpperEnv = upperEnvValue
	return respDiags
}

func (r *promotionLockResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data promotionLockResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Create API call logic
	apiCreateRequest := r.apiClient.PromotionAPI.Lock(auth.AuthContext(ctx, r.accessToken))
	_, httpResp, err := r.apiClient.PromotionAPI.LockExecute(apiCreateRequest)
	if err != nil {
		providererror.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while locking the environment", err, httpResp)
		return
	}

	// Read the lock status after creating the lock
	responseData, httpResp, err := r.apiClient.PromotionAPI.CheckLock(auth.AuthContext(ctx, r.accessToken)).Execute()
	if err != nil {
		providererror.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while reading the promotionLock", err, httpResp)
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *promotionLockResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data promotionLockResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read API call logic
	responseData, httpResp, err := r.apiClient.PromotionAPI.CheckLock(auth.AuthContext(ctx, r.accessToken)).Execute()
	if err != nil {
		providererror.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while reading the promotionLock", err, httpResp)
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *promotionLockResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	// This resource can't be updated after creation - all editable attributes should have RequiresReplace,
	// so this method will never be called
}

func (r *promotionLockResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data promotionLockResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Delete API call logic
	_, httpResp, err := r.apiClient.PromotionAPI.Unlock(auth.AuthContext(ctx, r.accessToken), data.PromotionId.ValueString()).Execute()
	if err != nil && (httpResp == nil || httpResp.StatusCode != 404) {
		providererror.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while unlocking the environment", err, httpResp)
	}
}

func (r *promotionLockResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	// This resource has no identifier attributes, so the value passed in here doesn't matter. Just return an empty state struct.
	var emptyState promotionLockResourceModel
	resp.Diagnostics.Append(resp.State.Set(ctx, &emptyState)...)
}
