// Code generated by ping-terraform-plugin-framework-generator

package promotion

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	client "github.com/pingidentity/identitycloud-go-client/identitycloud"
	"github.com/pingidentity/terraform-provider-identitycloud/internal/auth"
	"github.com/pingidentity/terraform-provider-identitycloud/internal/providererror"
	internaltypes "github.com/pingidentity/terraform-provider-identitycloud/internal/types"
)

var (
	_ datasource.DataSource              = &promotionLockDataSource{}
	_ datasource.DataSourceWithConfigure = &promotionLockDataSource{}
)

func PromotionLockDataSource() datasource.DataSource {
	return &promotionLockDataSource{}
}

type promotionLockDataSource struct {
	apiClient                 *client.APIClient
	accessToken               *string
	serviceAccountTokenSource *client.ServiceAccountTokenSource
}

func (r *promotionLockDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_promotion_lock"
}

func (r *promotionLockDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	resourceConfig, ok := req.ProviderData.(internaltypes.ResourceConfiguration)
	if !ok {
		resp.Diagnostics.AddError(providererror.InternalProviderError, "Invalid ProviderData when configuring resource. Please report this error in the provider's issue tracker.")
		return
	}
	r.apiClient = resourceConfig.ApiClient
	r.accessToken = resourceConfig.AccessToken
	r.serviceAccountTokenSource = resourceConfig.ServiceAccountConfig
}

type promotionLockDataSourceModel struct {
	Description types.String `tfsdk:"description"`
	LowerEnv    types.Object `tfsdk:"lower_env"`
	PromotionId types.String `tfsdk:"promotion_id"`
	Id          types.String `tfsdk:"id"`
	Result      types.String `tfsdk:"result"`
	UpperEnv    types.Object `tfsdk:"upper_env"`
}

func (r *promotionLockDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "Resource to create and manage the promotion lock process.",
		Attributes: map[string]schema.Attribute{
			"description": schema.StringAttribute{
				Computed:    true,
				Description: "Description of the state of the lock.",
			},
			"lower_env": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"promotion_id": schema.StringAttribute{
						Computed:    true,
						Description: "Promotion unique identifier.",
					},
					"proxy_state": schema.StringAttribute{
						Computed:    true,
						Description: "Proxy state of the lock.",
					},
					"state": schema.StringAttribute{
						Computed:    true,
						Description: "State of the lock.",
					},
				},
				Computed:    true,
				Description: "Lower environment lock status.",
			},
			"promotion_id": schema.StringAttribute{
				Computed:    true,
				Description: "Promotion unique identifier.",
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: "Promotion unique identifier.",
			},
			"result": schema.StringAttribute{
				Computed:    true,
				Description: "The lock status of the environment. Supported values are `unlocking`, `unlocked`, `locking`, `locked`, `error`.",
			},
			"upper_env": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"promotion_id": schema.StringAttribute{
						Computed:    true,
						Description: "Promotion unique identifier.",
					},
					"proxy_state": schema.StringAttribute{
						Computed:    true,
						Description: "Proxy state of the lock.",
					},
					"state": schema.StringAttribute{
						Computed:    true,
						Description: "State of the lock.",
					},
				},
				Computed:    true,
				Description: "Upper environment lock status.",
			},
		},
	}
}

func (state *promotionLockDataSourceModel) readClientResponse(response *client.PromotionLockState) diag.Diagnostics {
	var respDiags, diags diag.Diagnostics
	// description
	state.Description = types.StringPointerValue(response.Description)
	// lower_env
	lowerEnvAttrTypes := map[string]attr.Type{
		"promotion_id": types.StringType,
		"proxy_state":  types.StringType,
		"state":        types.StringType,
	}
	var lowerEnvValue types.Object
	if response.LowerEnv == nil {
		lowerEnvValue = types.ObjectNull(lowerEnvAttrTypes)
	} else {
		lowerEnvValue, diags = types.ObjectValue(lowerEnvAttrTypes, map[string]attr.Value{
			"promotion_id": types.StringPointerValue(response.LowerEnv.PromotionId),
			"proxy_state":  types.StringPointerValue(response.LowerEnv.ProxyState),
			"state":        types.StringPointerValue(response.LowerEnv.State),
		})
		respDiags.Append(diags...)
	}

	state.LowerEnv = lowerEnvValue
	// promotion_id
	state.PromotionId = types.StringPointerValue(response.PromotionId)
	// id
	state.Id = types.StringPointerValue(response.PromotionId)
	// result
	state.Result = types.StringPointerValue(response.Result)
	// upper_env
	upperEnvAttrTypes := map[string]attr.Type{
		"promotion_id": types.StringType,
		"proxy_state":  types.StringType,
		"state":        types.StringType,
	}
	var upperEnvValue types.Object
	if response.UpperEnv == nil {
		upperEnvValue = types.ObjectNull(upperEnvAttrTypes)
	} else {
		upperEnvValue, diags = types.ObjectValue(upperEnvAttrTypes, map[string]attr.Value{
			"promotion_id": types.StringPointerValue(response.UpperEnv.PromotionId),
			"proxy_state":  types.StringPointerValue(response.UpperEnv.ProxyState),
			"state":        types.StringPointerValue(response.UpperEnv.State),
		})
		respDiags.Append(diags...)
	}

	state.UpperEnv = upperEnvValue
	return respDiags
}

func (r *promotionLockDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data promotionLockDataSourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read API call logic
	responseData, httpResp, err := r.apiClient.PromotionAPI.CheckLock(auth.AuthContext(ctx, r.accessToken, r.serviceAccountTokenSource)).AcceptAPIVersion("protocol=1.0,resource=1.0").Execute()
	if err != nil {
		providererror.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while reading the promotionLock", err, httpResp)
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
