// Code generated by ping-terraform-plugin-framework-generator

package certificate

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	client "github.com/pingidentity/identitycloud-go-client/identitycloud"
	"github.com/pingidentity/terraform-provider-identitycloud/internal/auth"
	"github.com/pingidentity/terraform-provider-identitycloud/internal/providererror"
	internaltypes "github.com/pingidentity/terraform-provider-identitycloud/internal/types"
)

var (
	_ resource.Resource              = &certificateResource{}
	_ resource.ResourceWithConfigure = &certificateResource{}
)

func CertificateResource() resource.Resource {
	return &certificateResource{}
}

type certificateResource struct {
	apiClient   *client.APIClient
	accessToken string
}

func (r *certificateResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_certificate"
}

func (r *certificateResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	resourceConfig, ok := req.ProviderData.(internaltypes.ResourceConfiguration)
	if !ok {
		resp.Diagnostics.AddError(providererror.InternalProviderError, "Invalid ProviderData when configuring resource. Please report this error in the provider's issue tracker.")
		return
	}
	r.apiClient = resourceConfig.ApiClient
	r.accessToken = resourceConfig.AccessToken
}

type certificateResourceModel struct {
	Active                  types.Bool   `tfsdk:"active"`
	Certificate             types.String `tfsdk:"certificate"`
	ExpireTime              types.String `tfsdk:"expire_time"`
	Id                      types.String `tfsdk:"id"`
	Issuer                  types.String `tfsdk:"issuer"`
	Live                    types.Bool   `tfsdk:"live"`
	PrivateKey              types.String `tfsdk:"private_key"`
	Subject                 types.String `tfsdk:"subject"`
	SubjectAlternativeNames types.Set    `tfsdk:"subject_alternative_names"`
	ValidFromTime           types.String `tfsdk:"valid_from_time"`
}

func (r *certificateResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "Resource to create and manage a certificate.",
		Attributes: map[string]schema.Attribute{
			"active": schema.BoolAttribute{
				Optional:    true,
				Computed:    true,
				Description: "The active status of the certificate. Set this to true for the certificate to actively be served. Defaults to `false`.",
				Default:     booldefault.StaticBool(false),
			},
			"certificate": schema.StringAttribute{
				Required:    true,
				Description: "The PEM formatted certificate.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"expire_time": schema.StringAttribute{
				Computed:    true,
				Description: "The expiry time of the certificate.",
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: "The unique identifier for the certificate resource.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"issuer": schema.StringAttribute{
				Computed:    true,
				Description: "The issuer DN of the certificate",
			},
			"live": schema.BoolAttribute{
				Computed:    true,
				Description: "The live status of the certificate. This is automatically set by the system and indicates if the certificate is currently live externally.",
			},
			"private_key": schema.StringAttribute{
				Required:    true,
				Description: "The private key for the certificate. For security reasons, only insert requests include this field.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"subject": schema.StringAttribute{
				Computed:    true,
				Description: "The subject DN of the certificate",
			},
			"subject_alternative_names": schema.SetAttribute{
				ElementType: types.StringType,
				Computed:    true,
				Description: "Domains associated by with the certificate via the Subject Alternative Name extension. The common name should be included in the SANs as well.",
			},
			"valid_from_time": schema.StringAttribute{
				Computed:    true,
				Description: "The notBefore time of the certificate.",
			},
		},
	}
}

func (model *certificateResourceModel) buildClientStruct() (*client.CreateCertificateRequest, diag.Diagnostics) {
	result := &client.CreateCertificateRequest{}
	// active
	result.Active = model.Active.ValueBoolPointer()
	// certificate
	result.Certificate = model.Certificate.ValueString()
	// private_key
	result.PrivateKey = model.PrivateKey.ValueString()
	return result, nil
}

func (state *certificateResourceModel) readClientResponse(response *client.Certificate) diag.Diagnostics {
	var respDiags, diags diag.Diagnostics
	// active
	state.Active = types.BoolPointerValue(response.Active)
	// expire_time
	state.ExpireTime = types.StringPointerValue(response.ExpireTime)
	// id
	state.Id = types.StringPointerValue(response.Id)
	// issuer
	state.Issuer = types.StringPointerValue(response.Issuer)
	// live
	state.Live = types.BoolPointerValue(response.Live)
	// subject
	state.Subject = types.StringPointerValue(response.Subject)
	// subject_alternative_names
	state.SubjectAlternativeNames, diags = types.SetValueFrom(context.Background(), types.StringType, response.SubjectAlternativeNames)
	respDiags.Append(diags...)
	// valid_from_time
	state.ValidFromTime = types.StringPointerValue(response.ValidFromTime)
	return respDiags
}

func (r *certificateResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data certificateResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Create API call logic
	clientData, diags := data.buildClientStruct()
	resp.Diagnostics.Append(diags...)
	apiCreateRequest := r.apiClient.CertificatesAPI.CreateCertificate(auth.AuthContext(ctx, r.accessToken))
	apiCreateRequest = apiCreateRequest.Body(*clientData)
	responseData, httpResp, err := r.apiClient.CertificatesAPI.CreateCertificateExecute(apiCreateRequest)
	if err != nil {
		providererror.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while creating the certificate", err, httpResp)
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *certificateResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data certificateResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read API call logic
	responseData, httpResp, err := r.apiClient.CertificatesAPI.GetCertificateByID(auth.AuthContext(ctx, r.accessToken), data.Id.ValueString()).Execute()
	if err != nil {
		if httpResp != nil && httpResp.StatusCode == 404 {
			providererror.AddResourceNotFoundWarning(ctx, &resp.Diagnostics, "certificate", httpResp)
			resp.State.RemoveResource(ctx)
		} else {
			providererror.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while reading the certificate", err, httpResp)
		}
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *certificateResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data certificateResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Delete API call logic
	httpResp, err := r.apiClient.CertificatesAPI.DeleteCertificateByID(auth.AuthContext(ctx, r.accessToken), data.Id.ValueString()).Execute()
	if err != nil && (httpResp == nil || httpResp.StatusCode != 404) {
		providererror.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while deleting the certificate", err, httpResp)
	}
}
