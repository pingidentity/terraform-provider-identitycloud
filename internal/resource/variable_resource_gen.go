// Code generated by ping-terraform-plugin-framework-generator

package resource

import (
	"context"
	"regexp"
	"time"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	client "github.com/pingidentity/identitycloud-go-client/identitycloud"
	"github.com/pingidentity/terraform-provider-identitycloud/internal/auth"
	"github.com/pingidentity/terraform-provider-identitycloud/internal/providererror"
)

var (
	_ resource.Resource                = &variableResource{}
	_ resource.ResourceWithConfigure   = &variableResource{}
	_ resource.ResourceWithImportState = &variableResource{}
)

func VariableResource() resource.Resource {
	return &variableResource{}
}

type variableResource struct {
	apiClient   *client.APIClient
	accessToken string
}

func (r *variableResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_variable"
}

func (r *variableResource) Configure(_ context.Context, req resource.ConfigureRequest, _ *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.apiClient = req.ProviderData.(*client.APIClient)
}

type variableResourceModel struct {
	Description    types.String `tfsdk:"description"`
	ExpressionType types.String `tfsdk:"expression_type"`
	Id             types.String `tfsdk:"id"`
	LastChangeDate types.String `tfsdk:"last_change_date"`
	LastChangedBy  types.String `tfsdk:"last_changed_by"`
	Loaded         types.Bool   `tfsdk:"loaded"`
	ValueBase64    types.String `tfsdk:"value_base64"`
	VariableId     types.String `tfsdk:"variable_id"`
}

func (r *variableResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "Resource to create and manage a variable.",
		Attributes: map[string]schema.Attribute{
			"description": schema.StringAttribute{
				Optional: true,
				Computed: true,
				Validators: []validator.String{
					stringvalidator.LengthAtMost(1000),
				},
				Default: stringdefault.StaticString(""),
			},
			"expression_type": schema.StringAttribute{
				Optional:    true,
				Computed:    true,
				Description: "Supported values are `string`, `list`, `array`, `object`, `bool`, `int`, `number`, `base64encodedinlined`, `keyvaluelist`.",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"string",
						"list",
						"array",
						"object",
						"bool",
						"int",
						"number",
						"base64encodedinlined",
						"keyvaluelist",
					),
				},
				Default: stringdefault.StaticString(""),
			},
			"id": schema.StringAttribute{
				Computed: true,
			},
			"last_change_date": schema.StringAttribute{
				Computed: true,
			},
			"last_changed_by": schema.StringAttribute{
				Computed: true,
			},
			"loaded": schema.BoolAttribute{
				Computed: true,
			},
			"value_base64": schema.StringAttribute{
				Required: true,
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"), ""),
				},
			},
			"variable_id": schema.StringAttribute{
				Required:    true,
				Description: "ID of the variable",
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^esv-[a-z0-9_-]{1,124}$"), ""),
				},
			},
		},
	}
}

func (model *variableResourceModel) buildClientStruct() (*client.EsvVariableCreateUpdateRequest, diag.Diagnostics) {
	result := &client.EsvVariableCreateUpdateRequest{}
	// description
	result.Description = model.Description.ValueStringPointer()
	// expression_type
	result.ExpressionType = model.ExpressionType.ValueStringPointer()
	// value_base64
	result.ValueBase64 = model.ValueBase64.ValueString()
	return result, nil
}

func (state *variableResourceModel) readClientResponse(response *client.EsvVariableResponse) diag.Diagnostics {
	// description
	state.Description = types.StringValue(response.Description)
	// expression_type
	state.ExpressionType = types.StringValue(response.ExpressionType)
	// id
	state.Id = types.StringValue(response.Id)
	// last_change_date
	state.LastChangeDate = types.StringValue(response.LastChangeDate.Format(time.RFC3339))
	// last_changed_by
	state.LastChangedBy = types.StringValue(response.LastChangedBy)
	// loaded
	state.Loaded = types.BoolValue(response.Loaded)
	// value_base64
	state.ValueBase64 = types.StringValue(response.ValueBase64)
	return nil
}

func (r *variableResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data variableResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Create API call logic
	clientData, diags := data.buildClientStruct()
	resp.Diagnostics.Append(diags...)
	apiCreateRequest := r.apiClient.VariablesAPI.CreateVariables(auth.AuthContext(ctx, r.accessToken), data.VariableId.ValueString())
	apiCreateRequest = apiCreateRequest.Body(*clientData)
	responseData, httpResp, err := r.apiClient.VariablesAPI.CreateVariablesExecute(apiCreateRequest)
	if err != nil {
		providererror.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while creating the variable", err, httpResp)
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *variableResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data variableResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read API call logic
	responseData, httpResp, err := r.apiClient.VariablesAPI.GetVariable(auth.AuthContext(ctx, r.accessToken), data.VariableId.ValueString()).Execute()
	if err != nil {
		if httpResp != nil && httpResp.StatusCode == 404 {
			providererror.AddResourceNotFoundWarning(ctx, &resp.Diagnostics, "variable", httpResp)
			resp.State.RemoveResource(ctx)
		} else {
			providererror.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while reading the variable", err, httpResp)
		}
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *variableResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data variableResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Update API call logic
	clientData, diags := data.buildClientStruct()
	resp.Diagnostics.Append(diags...)
	apiUpdateRequest := r.apiClient.VariablesAPI.CreateVariables(auth.AuthContext(ctx, r.accessToken), data.VariableId.ValueString())
	apiUpdateRequest = apiUpdateRequest.Body(*clientData)
	responseData, httpResp, err := r.apiClient.VariablesAPI.CreateVariablesExecute(apiUpdateRequest)
	if err != nil {
		providererror.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while updating the variable", err, httpResp)
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *variableResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data variableResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Delete API call logic
	_, httpResp, err := r.apiClient.VariablesAPI.DeleteVariable(auth.AuthContext(ctx, r.accessToken), data.VariableId.ValueString()).Execute()
	if err != nil && (httpResp == nil || httpResp.StatusCode != 404) {
		providererror.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while deleting the variable", err, httpResp)
	}
}

func (r *variableResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	// Retrieve import ID and save to variable_id attribute
	resource.ImportStatePassthroughID(ctx, path.Root("variable_id"), req, resp)
}
