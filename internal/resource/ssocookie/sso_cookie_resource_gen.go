// Code generated by ping-terraform-plugin-framework-generator

package ssocookie

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	client "github.com/pingidentity/identitycloud-go-client/identitycloud"
	"github.com/pingidentity/terraform-provider-identitycloud/internal/auth"
	"github.com/pingidentity/terraform-provider-identitycloud/internal/providererror"
	internaltypes "github.com/pingidentity/terraform-provider-identitycloud/internal/types"
)

var (
	_ resource.Resource                = &ssoCookieResource{}
	_ resource.ResourceWithConfigure   = &ssoCookieResource{}
	_ resource.ResourceWithImportState = &ssoCookieResource{}
)

func SsoCookieResource() resource.Resource {
	return &ssoCookieResource{}
}

type ssoCookieResource struct {
	apiClient                 *client.APIClient
	accessToken               *string
	serviceAccountTokenSource *client.ServiceAccountTokenSource
}

func (r *ssoCookieResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_sso_cookie"
}

func (r *ssoCookieResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	resourceConfig, ok := req.ProviderData.(internaltypes.ResourceConfiguration)
	if !ok {
		resp.Diagnostics.AddError(providererror.InternalProviderError, "Invalid ProviderData when configuring resource. Please report this error in the provider's issue tracker.")
		return
	}
	r.apiClient = resourceConfig.ApiClient
	r.accessToken = resourceConfig.AccessToken
	r.serviceAccountTokenSource = resourceConfig.ServiceAccountConfig
}

type ssoCookieResourceModel struct {
	Name types.String `tfsdk:"name"`
}

func (r *ssoCookieResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "Resource to create and manage the sso cookie.",
		Attributes: map[string]schema.Attribute{
			"name": schema.StringAttribute{
				Required:    true,
				Description: "The name of the sso cookie.",
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9]{1,32}$"), ""),
				},
			},
		},
	}
}

func (model *ssoCookieResourceModel) buildClientStruct() (*client.SSOCookie, diag.Diagnostics) {
	result := &client.SSOCookie{}
	// name
	result.Name = model.Name.ValueString()
	return result, nil
}

func (state *ssoCookieResourceModel) readClientResponse(response *client.SSOCookie) diag.Diagnostics {
	// name
	state.Name = types.StringValue(response.Name)
	return nil
}

func (r *ssoCookieResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data ssoCookieResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Update API call logic, since this is a singleton resource
	clientData, diags := data.buildClientStruct()
	resp.Diagnostics.Append(diags...)
	apiUpdateRequest := r.apiClient.SSOCookieAPI.SetSSOCookie(auth.AuthContext(ctx, r.accessToken, r.serviceAccountTokenSource))
	apiUpdateRequest = apiUpdateRequest.Body(*clientData)
	responseData, _, err := r.apiClient.SSOCookieAPI.SetSSOCookieExecute(apiUpdateRequest)
	if err != nil {
		resp.Diagnostics.AddError("An error occurred while creating the ssoCookie", err.Error())
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ssoCookieResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data ssoCookieResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read API call logic
	responseData, httpResp, err := r.apiClient.SSOCookieAPI.GetSSOCookie(auth.AuthContext(ctx, r.accessToken, r.serviceAccountTokenSource)).Execute()
	if err != nil {
		if httpResp != nil && httpResp.StatusCode == 404 {
			providererror.AddResourceNotFoundWarning(ctx, &resp.Diagnostics, "ssoCookie", httpResp)
			resp.State.RemoveResource(ctx)
		} else {
			providererror.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while reading the ssoCookie", err, httpResp)
		}
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ssoCookieResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data ssoCookieResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Update API call logic
	clientData, diags := data.buildClientStruct()
	resp.Diagnostics.Append(diags...)
	apiUpdateRequest := r.apiClient.SSOCookieAPI.SetSSOCookie(auth.AuthContext(ctx, r.accessToken, r.serviceAccountTokenSource))
	apiUpdateRequest = apiUpdateRequest.Body(*clientData)
	responseData, httpResp, err := r.apiClient.SSOCookieAPI.SetSSOCookieExecute(apiUpdateRequest)
	if err != nil {
		providererror.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while updating the ssoCookie", err, httpResp)
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ssoCookieResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	// This resource is singleton, so it can't be deleted from the service.
	// Instead this delete method will attempt to set the resource to its default state on the service.
	apiUpdateRequest := r.apiClient.SSOCookieAPI.ResetSSOCookie(auth.AuthContext(ctx, r.accessToken, r.serviceAccountTokenSource))
	apiUpdateRequest = apiUpdateRequest.Action("reset")
	_, _, err := r.apiClient.SSOCookieAPI.ResetSSOCookieExecute(apiUpdateRequest)
	if err != nil {
		resp.Diagnostics.AddError("An error occurred while resetting the ssoCookie", err.Error())
	}
}

func (r *ssoCookieResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	// This resource has no identifier attributes, so the value passed in here doesn't matter. Just return an empty state struct.
	var emptyState ssoCookieResourceModel
	resp.Diagnostics.Append(resp.State.Set(ctx, &emptyState)...)
}
