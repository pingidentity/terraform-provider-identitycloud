// Code generated by ping-terraform-plugin-framework-generator

package variable_test

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/http/httptest"
	"os"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	"github.com/pingidentity/terraform-provider-identitycloud/internal/acctest"
	"github.com/pingidentity/terraform-provider-identitycloud/internal/provider"
	"github.com/pingidentity/terraform-provider-identitycloud/internal/utils"
)

const variableVariableId = "esv-variable1234"

var testServerUrl *string

func TestAccVariable_RemovalDrift(t *testing.T) {
	if strings.ToLower(os.Getenv("PINGAIC_TF_TEST_MOCK_SERVICE")) == "true" {
		testServer := mockVariableHttpServer()
		testServerUrl = utils.Pointer(testServer.URL)
		os.Setenv("PINGAIC_TF_TEST_OVERRIDE_URL", testServer.URL)
		defer testServer.Close()
	}
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"identitycloud": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: variable_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: variable_MinimalHCL(),
			},
			{
				// Delete the resource on the service, outside of terraform, verify that a non-empty plan is generated
				PreConfig: func() {
					variable_Delete(t)
				},
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
			},
		},
	})
}

func TestAccVariable_MinimalMaximal(t *testing.T) {
	if strings.ToLower(os.Getenv("PINGAIC_TF_TEST_MOCK_SERVICE")) == "true" {
		testServer := mockVariableHttpServer()
		testServerUrl = utils.Pointer(testServer.URL)
		os.Setenv("PINGAIC_TF_TEST_OVERRIDE_URL", testServer.URL)
		defer testServer.Close()
	}
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"identitycloud": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: variable_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: variable_MinimalHCL(),
				Check:  variable_CheckComputedValuesMinimal(),
			},
			{
				// Delete the minimal model
				Config:  variable_MinimalHCL(),
				Destroy: true,
			},
			{
				// Re-create with a complete model
				Config: variable_CompleteHCL(),
				Check:  variable_CheckComputedValuesComplete(),
			},
			{
				// Back to minimal model
				Config: variable_MinimalHCL(),
				Check:  variable_CheckComputedValuesMinimal(),
			},
			{
				// Back to complete model
				Config: variable_CompleteHCL(),
				Check:  variable_CheckComputedValuesComplete(),
			},
			{
				// Test importing the resource
				Config:                               variable_CompleteHCL(),
				ResourceName:                         "identitycloud_variable.example",
				ImportStateId:                        variableVariableId,
				ImportStateVerifyIdentifierAttribute: "variable_id",
				ImportState:                          true,
				ImportStateVerify:                    true,
			},
		},
	})
}

// Minimal HCL with only required values set
func variable_MinimalHCL() string {
	return fmt.Sprintf(`
resource "identitycloud_variable" "example" {
  variable_id = "%s"
  expression_type = "string"
  value_base64 = "aGVsbG8="
}
`, variableVariableId)
}

// Maximal HCL with all values set where possible
func variable_CompleteHCL() string {
	return fmt.Sprintf(`
resource "identitycloud_variable" "example" {
  variable_id = "%s"
  description = "My variable"
  expression_type = "string"
  value_base64 = "ZHVza3VsbA=="
}
`, variableVariableId)
}

// Validate any computed values when applying minimal HCL
func variable_CheckComputedValuesMinimal() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("identitycloud_variable.example", "description", ""),
		resource.TestCheckResourceAttr("identitycloud_variable.example", "expression_type", "string"),
		resource.TestCheckResourceAttr("identitycloud_variable.example", "id", variableVariableId),
		resource.TestCheckResourceAttrSet("identitycloud_variable.example", "last_change_date"),
		resource.TestCheckResourceAttr("identitycloud_variable.example", "last_changed_by", "Terraform provider testing"),
		resource.TestCheckResourceAttr("identitycloud_variable.example", "loaded", "false"),
	)
}

// Validate any computed values when applying complete HCL
func variable_CheckComputedValuesComplete() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("identitycloud_variable.example", "id", variableVariableId),
		resource.TestCheckResourceAttrSet("identitycloud_variable.example", "last_change_date"),
		resource.TestCheckResourceAttr("identitycloud_variable.example", "last_changed_by", "Terraform provider testing"),
		resource.TestCheckResourceAttr("identitycloud_variable.example", "loaded", "false"),
	)
}

// Delete the resource
func variable_Delete(t *testing.T) {
	testClient := acctest.Client(testServerUrl)
	_, _, err := testClient.VariablesAPI.DeleteVariable(acctest.AuthContext(), variableVariableId).Execute()
	if err != nil {
		t.Fatalf("Failed to delete config: %v", err)
	}
}

// Test that any objects created by the test are destroyed
func variable_CheckDestroy(s *terraform.State) error {
	testClient := acctest.Client(testServerUrl)
	_, _, err := testClient.VariablesAPI.DeleteVariable(acctest.AuthContext(), variableVariableId).Execute()
	if err == nil {
		return fmt.Errorf("variable still exists after tests. Expected it to be destroyed")
	}
	return nil
}

type variable struct {
	Description    string `json:"description"`
	ExpressionType string `json:"expressionType"`
	Id             string `json:"_id"`
	LastChangeDate string `json:"lastChangeDate"`
	LastChangedBy  string `json:"lastChangedBy"`
	Loaded         bool   `json:"loaded"`
	ValueBase64    string `json:"valueBase64"`
}

var testVars = map[string]variable{}

func mockVariableHttpServer() *httptest.Server {
	return httptest.NewTLSServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		var out []byte
		varId := strings.Split(r.URL.String(), "/")[3]
		switch r.Method {
		case http.MethodGet:
			storedVar, ok := testVars[varId]
			if !ok {
				http.Error(w, "variable not found", http.StatusNotFound)
				return
			}
			out, _ = json.Marshal(storedVar)
		case http.MethodPut:
			var inputVar variable
			err := json.NewDecoder(r.Body).Decode(&inputVar)
			if err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			}
			inputVar.Id = varId
			inputVar.LastChangeDate = "2024-01-01T00:00:00Z"
			inputVar.LastChangedBy = "user"
			inputVar.Loaded = true
			testVars[varId] = inputVar
			out, _ = json.Marshal(inputVar)
		case http.MethodDelete:
			storedVar, ok := testVars[varId]
			if !ok {
				http.Error(w, "variable not found", http.StatusNotFound)
				return
			}
			delete(testVars, varId)
			out, _ = json.Marshal(storedVar)
		}
		w.Header().Set("Content-Type", "application/json")
		w.Header().Set("Content-API-Version", "1.0")
		w.WriteHeader(http.StatusOK)
		w.Write(out)
	}))
}
