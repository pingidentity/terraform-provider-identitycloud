// Code generated by ping-terraform-plugin-framework-generator

package csrs_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	"github.com/pingidentity/terraform-provider-identitycloud/internal/acctest"
	"github.com/pingidentity/terraform-provider-identitycloud/internal/provider"
)

const certificateSigningRequestId = "certificateSigningRequestId"

var certificateSigningRequestTestServerUrl *string

func TestAccCertificateSigningRequest_RemovalDrift(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"identitycloud": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: certificateSigningRequest_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: certificateSigningRequest_MinimalHCL(),
			},
			{
				// Delete the resource on the service, outside of terraform, verify that a non-empty plan is generated
				PreConfig: func() {
					certificateSigningRequest_Delete(t)
				},
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
			},
		},
	})
}

func TestAccCertificateSigningRequest_MinimalMaximal(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"identitycloud": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		CheckDestroy: certificateSigningRequest_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: certificateSigningRequest_MinimalHCL(),
				Check:  certificateSigningRequest_CheckComputedValuesMinimal(),
			},
			{
				// Delete the minimal model
				Config:  certificateSigningRequest_MinimalHCL(),
				Destroy: true,
			},
			{
				// Re-create with a complete model
				Config: certificateSigningRequest_CompleteHCL(),
				Check:  certificateSigningRequest_CheckComputedValuesComplete(),
			},
			{
				// Back to minimal model
				Config: certificateSigningRequest_MinimalHCL(),
				Check:  certificateSigningRequest_CheckComputedValuesMinimal(),
			},
			{
				// Back to complete model
				Config: certificateSigningRequest_CompleteHCL(),
				Check:  certificateSigningRequest_CheckComputedValuesComplete(),
			},
		},
	})
}

// Minimal HCL with only required values set
func certificateSigningRequest_MinimalHCL() string {
	return `
resource "identitycloud_certificate_signing_request" "example" {
}
`
}

// Maximal HCL with all values set where possible
func certificateSigningRequest_CompleteHCL() string {
	return `
resource "identitycloud_certificate_signing_request" "example" {
  algorithm = "ecdsa"
  business_category = "Example"
  city = "Austin"
  common_name = "Ping"
  country = "US"
  email = "example@example.com"
  jurisdiction_city = "Austin"
  jurisdiction_country = "US"
  jurisdiction_state = "TX"
  organization = "Ping"
  organizational_unit = "Example"
  postal_code = "78701"
  serial_number = "123456"
  state = "TX"
  street_address = "1234 Example St"
  subject_alternative_names = ["example.com"]
}
`
}

// Validate any computed values when applying minimal HCL
func certificateSigningRequest_CheckComputedValuesMinimal() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("identitycloud_certificate_signing_request.example", "algorithm", "rsa"),
		resource.TestCheckNoResourceAttr("identitycloud_certificate_signing_request.example", "certificate_id"),
		resource.TestCheckResourceAttrSet("identitycloud_certificate_signing_request.example", "id"),
		resource.TestCheckResourceAttrSet("identitycloud_certificate_signing_request.example", "created_date"),
		resource.TestCheckResourceAttrSet("identitycloud_certificate_signing_request.example", "request"),
		resource.TestCheckNoResourceAttr("identitycloud_certificate_signing_request.example", "subject"),
		resource.TestCheckResourceAttr("identitycloud_certificate_signing_request.example", "subject_alternative_names.#", "0"),
	)
}

// Validate any computed values when applying complete HCL
func certificateSigningRequest_CheckComputedValuesComplete() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckNoResourceAttr("identitycloud_certificate_signing_request.example", "certificate_id"),
		resource.TestCheckResourceAttrSet("identitycloud_certificate_signing_request.example", "id"),
		resource.TestCheckResourceAttrSet("identitycloud_certificate_signing_request.example", "created_date"),
		resource.TestCheckResourceAttrSet("identitycloud_certificate_signing_request.example", "request"),
		resource.TestCheckResourceAttr("identitycloud_certificate_signing_request.example", "subject", "C=US/ST=TX/L=Austin/streetAddress=1234 Example St/O=Ping/OU=Example/CN=Ping/SERIALNUMBER=123456/emailAddress=example@example.com/businessCategory=Example/jurisdictionCountryName=US/jurisdictionLocalityName=Austin/jurisdictionStateOrProvinceName=TX"),
	)
}

// Delete the resource
func certificateSigningRequest_Delete(t *testing.T) {
	testClient := acctest.Client(certificateSigningRequestTestServerUrl)
	_, err := testClient.CSRsAPI.DeleteCertificateSigningRequestById(acctest.AuthContext(), certificateSigningRequestId).Execute()
	if err != nil {
		t.Fatalf("Failed to delete config: %v", err)
	}
}

// Test that any objects created by the test are destroyed
func certificateSigningRequest_CheckDestroy(s *terraform.State) error {
	testClient := acctest.Client(certificateSigningRequestTestServerUrl)
	_, _, err := testClient.CSRsAPI.GetCertificateSigningRequestById(acctest.AuthContext(), certificateSigningRequestId).Execute()
	if err == nil {
		return fmt.Errorf("certificate_signing_request still exists after tests. Expected it to be destroyed")
	}
	return nil
}
