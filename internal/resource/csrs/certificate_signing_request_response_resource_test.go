// Code generated by ping-terraform-plugin-framework-generator

package csrs_test

import (
	"errors"
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-framework/providerserver"
	"github.com/hashicorp/terraform-plugin-go/tfprotov6"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	"github.com/pingidentity/terraform-provider-identitycloud/internal/acctest"
	"github.com/pingidentity/terraform-provider-identitycloud/internal/provider"
)

var certificateId string

func TestAccCertificateSigningRequestResponse_CertificateRemovalDrift(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"identitycloud": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		ExternalProviders: map[string]resource.ExternalProvider{
			"tls": {
				VersionConstraint: ">=4.0.0",
				Source:            "hashicorp/tls",
			},
		},
		CheckDestroy: certificateSigningRequestResponse_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: certificateSigningRequestResponse_MinimalHCL(),
				Check:  getCertificateId(),
			},
			{
				// Delete the resource on the service, outside of terraform, verify that a non-empty plan is generated
				PreConfig: func() {
					certificateSigningRequestResponse_Delete(t)
				},
				RefreshState:       true,
				ExpectNonEmptyPlan: true,
			},
		},
	})
}

func TestAccCertificateSigningRequestResponse_MinimalMaximal(t *testing.T) {
	resource.Test(t, resource.TestCase{
		PreCheck: func() { acctest.ConfigurationPreCheck(t) },
		ProtoV6ProviderFactories: map[string]func() (tfprotov6.ProviderServer, error){
			"identitycloud": providerserver.NewProtocol6WithError(provider.NewTestProvider()),
		},
		ExternalProviders: map[string]resource.ExternalProvider{
			"tls": {
				VersionConstraint: ">=4.0.0",
				Source:            "hashicorp/tls",
			},
		},
		CheckDestroy: certificateSigningRequestResponse_CheckDestroy,
		Steps: []resource.TestStep{
			{
				// Create the resource with a minimal model
				Config: certificateSigningRequestResponse_MinimalHCL(),
				Check:  certificateSigningRequestResponse_CheckComputedValuesMinimal(),
			},
			{
				// Switch to complete model
				Config: certificateSigningRequestResponse_CompleteHCL(),
				Check: resource.ComposeTestCheckFunc(
					certificateSigningRequestResponse_CheckComputedValuesComplete(),
					getCertificateId(),
				),
			},
		},
	})
}

// Minimal HCL with only required values set
func certificateSigningRequestResponse_MinimalHCL() string {
	return `
resource "identitycloud_certificate_signing_request_export" "example" {
  common_name = "Test CN"
  organization = "Test Org"
  country = "US"
}

resource "tls_locally_signed_cert" "example" {
  cert_request_pem   = identitycloud_certificate_signing_request_export.example.request
  ca_private_key_pem = <<EOF
-----BEGIN PRIVATE KEY-----
MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQDN3FPXcgDTEnys
HWGSrFr8lNOuYuc2NNGdUl3BqAYpOFDGlaqHQNyE0ypdNoU0aDGJreE8Hnd7DucQ
y4h/5B+riZ57EovfJGDzo2DnoGsZuy4rrPim1Gl2eazGCSkR8bK12ZQWQ9cAYTqP
hN39SsBYHLPsL3KXurMVh6itarmcAFwiI6UvEFhdfd867drjhI17E2CXl0MkC2fy
aixDX3AlyObTx8pGod5Zi8FX32RCWFZrtaJPF2ttRk6tQwdhG4o78kPvfZ1ymexq
v0d+NCL48feAKDDg0k24ErMu/q3wPNmc3FqIqBn7lzF2GFEB73wwXRB5NvKaNUvK
gUGkytENAgMBAAECggEATTPt9YR5rq7mNp4mM52T2dnusR3CXF/epMN5CeF7vgWy
tWb3txWqHd4bqy2BMzBIM7wUFjnO0UW7fl72aBAjmG9aEgnYjuzTt0t0UimlQNcj
75lE/zv1+UqUcwiIcIRWY0Cf+uGiRjAwiBZqMk3QaLsK9u6saR7Jfq+LoM2/ojMM
KHLdsk8U7X4owktQtHn9uMPAb47XHR3Rk2Gd7/9qAHllobdVt29/WuAAGnBfoYAE
KkehDfiiYnY502bIfP/JkJf+bVZpvTDZ18npCSiuHqxFtbkT8qJOEsQF0awMvJ4V
kS9u7fa687ErRrS/vF/3MTxy1bPBUd8BLEoMRF/WuQKBgQDnrwWp05MIWtPneqX6
kWC5+ZP5umhCgV9MQovlNoAXfvuV1ULgXapbKtOWQsDDT1yHn3P+sXB5u4P9GTP9
hZL1E4domYwXVKgTWs4j4gGHTjUeYLMd3RIlyfLrxX/bZYoYYSLfpvPkgNsv2lQS
7OtAf/ROxIiINm3sV5mvCMi9rwKBgQDjd3spB2en1KKx5dw6kNCqCwNGP7Q2vFPB
A+QDafnNb1Voiw9oiZuYUp55AlMVAOcgHxsg3BvOT5K8eCipnh513WLuHKsktl0Z
Z4/4xOfZ0IBZXMxcvaZGlUwKQ5VLpmVSWqYq+k9FI/LTN7uXwCbMH4dmNi96TxxF
j/5gppboAwKBgBecf7BCDq8ASq5Bkp7JqBjr9Yey1qNIegTUl1tBxaYfW9Z2SH2D
LjRiVfPvU6PT97Merfyb6sGNObNWmTTSIxr05YzkcSGDkCmAzJddlhhLASDabAa0
HABb53TdyNz8KSm45Iv0gNCdzTjAQGc5W/RT1fsdDmkLWwKGHvR2qbajAoGAfpO9
WE6DkvQTePVVQM3XH9izAMNwUEkqPi0hE/lEBdqfZ2aCs4RnrjLDdskhXH29H7XP
jdCONJc5K2GeFw0jHCmO5LvVTL+iPQHRLvi7oAyTb6bhHfZ28a4gu1FyYb99gH9r
Gl1iATKI7JqF7GMD8/DTksAyWVhufhMr1bK+JOsCgYA50RLvynoi+CX9B6nFkTNB
8nE8TaIYnTlM+nLiMhOgeEOE342ZskS1+IgwX80O3FPnGwKZ4l2w+qxoRm9f1ttq
O0+zW5XVp0cwpE8VgIRYekjVh31d0NHYabcE5NHL+tLF8RK1J7ZI/gij3yE35PLz
02tA3Yd4yAolyH3i2TlwwQ==
-----END PRIVATE KEY-----
EOF
  ca_cert_pem = <<EOF
-----BEGIN CERTIFICATE-----
MIIDUTCCAjugAwIBAgIQPEkZGqCnSpsZf0jWCWxJ5jALBgkqhkiG9w0BAQswRzEL
MAkGA1UEBgwCVVMxHDAaBgNVBAoME0V4YW1wbGUgQ29ycG9yYXRpb24xGjAYBgNV
BAMMEUV4YW1wbGUgQXV0aG9yaXR5MB4XDTI0MDEwMTAwMDAwMFoXDTQzMTIyNzAw
MDAwMFowRzELMAkGA1UEBgwCVVMxHDAaBgNVBAoME0V4YW1wbGUgQ29ycG9yYXRp
b24xGjAYBgNVBAMMEUV4YW1wbGUgQXV0aG9yaXR5MIIBIjANBgkqhkiG9w0BAQEF
AAOCAQ8AMIIBCgKCAQEAzdxT13IA0xJ8rB1hkqxa/JTTrmLnNjTRnVJdwagGKThQ
xpWqh0DchNMqXTaFNGgxia3hPB53ew7nEMuIf+Qfq4meexKL3yRg86Ng56BrGbsu
K6z4ptRpdnmsxgkpEfGytdmUFkPXAGE6j4Td/UrAWByz7C9yl7qzFYeorWq5nABc
IiOlLxBYXX3fOu3a44SNexNgl5dDJAtn8mosQ19wJcjm08fKRqHeWYvBV99kQlhW
a7WiTxdrbUZOrUMHYRuKO/JD732dcpnsar9HfjQi+PH3gCgw4NJNuBKzLv6t8DzZ
nNxaiKgZ+5cxdhhRAe98MF0QeTbymjVLyoFBpMrRDQIDAQABoz0wOzAdBgNVHQ4E
FgQUGNJsUqA63OVS8ouwVUkzaEP5vawwDAYDVR0TBAUwAwEB/zAMBgNVHQ8EBQMD
BwYAMAsGCSqGSIb3DQEBCwOCAQEAGFvsWv35ipg0NNnq0x+e7Gtugn9OBhxkeTWo
Q1IUR7CL9zMRdlErIx5waptJhlPZFZANVpuvYa+yRz7oz2txH8yf/0N+F0bTeNU/
qZHenvp9RXzimxTFDoCkx7ESpW9b7IKSSZA6Zut6w7XzJeXRrNKfCSSrUGPfkCq4
hOtAm9QzUVE7eJ5a7T3+O50gZdoxjdojPhh9h5E1b+bmexrfQKlVl/gL+KPacBJD
bSxbiKECt5QGRdDGFFfoInhK1RiW7a/hQBhMWRsMiOFtu0YpfxfwIyIaK5QfHZBC
CC7JaJKg19njrnkjfmiBGoev7XiYWYt/WvYAiZR4nJn/cFrW1A==
-----END CERTIFICATE-----
EOF

  validity_period_hours = 12

  allowed_uses = [
    "server_auth",
  ]
}

resource "identitycloud_certificate_signing_request_response" "example" {
  certificate = tls_locally_signed_cert.example.cert_pem
  certificate_signing_request_id = identitycloud_certificate_signing_request_export.example.id
}
`
}

// Maximal HCL with all values set where possible
func certificateSigningRequestResponse_CompleteHCL() string {
	return `
resource "identitycloud_certificate_signing_request_export" "example" {
  common_name = "Second Test CN"
  organization = "Second Test Org"
  country = "US"
  subject_alternative_names = ["example.com"]
}

resource "tls_locally_signed_cert" "example" {
  cert_request_pem   = identitycloud_certificate_signing_request_export.example.request
  ca_private_key_pem = <<EOF
-----BEGIN PRIVATE KEY-----
MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQDN3FPXcgDTEnys
HWGSrFr8lNOuYuc2NNGdUl3BqAYpOFDGlaqHQNyE0ypdNoU0aDGJreE8Hnd7DucQ
y4h/5B+riZ57EovfJGDzo2DnoGsZuy4rrPim1Gl2eazGCSkR8bK12ZQWQ9cAYTqP
hN39SsBYHLPsL3KXurMVh6itarmcAFwiI6UvEFhdfd867drjhI17E2CXl0MkC2fy
aixDX3AlyObTx8pGod5Zi8FX32RCWFZrtaJPF2ttRk6tQwdhG4o78kPvfZ1ymexq
v0d+NCL48feAKDDg0k24ErMu/q3wPNmc3FqIqBn7lzF2GFEB73wwXRB5NvKaNUvK
gUGkytENAgMBAAECggEATTPt9YR5rq7mNp4mM52T2dnusR3CXF/epMN5CeF7vgWy
tWb3txWqHd4bqy2BMzBIM7wUFjnO0UW7fl72aBAjmG9aEgnYjuzTt0t0UimlQNcj
75lE/zv1+UqUcwiIcIRWY0Cf+uGiRjAwiBZqMk3QaLsK9u6saR7Jfq+LoM2/ojMM
KHLdsk8U7X4owktQtHn9uMPAb47XHR3Rk2Gd7/9qAHllobdVt29/WuAAGnBfoYAE
KkehDfiiYnY502bIfP/JkJf+bVZpvTDZ18npCSiuHqxFtbkT8qJOEsQF0awMvJ4V
kS9u7fa687ErRrS/vF/3MTxy1bPBUd8BLEoMRF/WuQKBgQDnrwWp05MIWtPneqX6
kWC5+ZP5umhCgV9MQovlNoAXfvuV1ULgXapbKtOWQsDDT1yHn3P+sXB5u4P9GTP9
hZL1E4domYwXVKgTWs4j4gGHTjUeYLMd3RIlyfLrxX/bZYoYYSLfpvPkgNsv2lQS
7OtAf/ROxIiINm3sV5mvCMi9rwKBgQDjd3spB2en1KKx5dw6kNCqCwNGP7Q2vFPB
A+QDafnNb1Voiw9oiZuYUp55AlMVAOcgHxsg3BvOT5K8eCipnh513WLuHKsktl0Z
Z4/4xOfZ0IBZXMxcvaZGlUwKQ5VLpmVSWqYq+k9FI/LTN7uXwCbMH4dmNi96TxxF
j/5gppboAwKBgBecf7BCDq8ASq5Bkp7JqBjr9Yey1qNIegTUl1tBxaYfW9Z2SH2D
LjRiVfPvU6PT97Merfyb6sGNObNWmTTSIxr05YzkcSGDkCmAzJddlhhLASDabAa0
HABb53TdyNz8KSm45Iv0gNCdzTjAQGc5W/RT1fsdDmkLWwKGHvR2qbajAoGAfpO9
WE6DkvQTePVVQM3XH9izAMNwUEkqPi0hE/lEBdqfZ2aCs4RnrjLDdskhXH29H7XP
jdCONJc5K2GeFw0jHCmO5LvVTL+iPQHRLvi7oAyTb6bhHfZ28a4gu1FyYb99gH9r
Gl1iATKI7JqF7GMD8/DTksAyWVhufhMr1bK+JOsCgYA50RLvynoi+CX9B6nFkTNB
8nE8TaIYnTlM+nLiMhOgeEOE342ZskS1+IgwX80O3FPnGwKZ4l2w+qxoRm9f1ttq
O0+zW5XVp0cwpE8VgIRYekjVh31d0NHYabcE5NHL+tLF8RK1J7ZI/gij3yE35PLz
02tA3Yd4yAolyH3i2TlwwQ==
-----END PRIVATE KEY-----
EOF
  ca_cert_pem = <<EOF
-----BEGIN CERTIFICATE-----
MIIDUTCCAjugAwIBAgIQPEkZGqCnSpsZf0jWCWxJ5jALBgkqhkiG9w0BAQswRzEL
MAkGA1UEBgwCVVMxHDAaBgNVBAoME0V4YW1wbGUgQ29ycG9yYXRpb24xGjAYBgNV
BAMMEUV4YW1wbGUgQXV0aG9yaXR5MB4XDTI0MDEwMTAwMDAwMFoXDTQzMTIyNzAw
MDAwMFowRzELMAkGA1UEBgwCVVMxHDAaBgNVBAoME0V4YW1wbGUgQ29ycG9yYXRp
b24xGjAYBgNVBAMMEUV4YW1wbGUgQXV0aG9yaXR5MIIBIjANBgkqhkiG9w0BAQEF
AAOCAQ8AMIIBCgKCAQEAzdxT13IA0xJ8rB1hkqxa/JTTrmLnNjTRnVJdwagGKThQ
xpWqh0DchNMqXTaFNGgxia3hPB53ew7nEMuIf+Qfq4meexKL3yRg86Ng56BrGbsu
K6z4ptRpdnmsxgkpEfGytdmUFkPXAGE6j4Td/UrAWByz7C9yl7qzFYeorWq5nABc
IiOlLxBYXX3fOu3a44SNexNgl5dDJAtn8mosQ19wJcjm08fKRqHeWYvBV99kQlhW
a7WiTxdrbUZOrUMHYRuKO/JD732dcpnsar9HfjQi+PH3gCgw4NJNuBKzLv6t8DzZ
nNxaiKgZ+5cxdhhRAe98MF0QeTbymjVLyoFBpMrRDQIDAQABoz0wOzAdBgNVHQ4E
FgQUGNJsUqA63OVS8ouwVUkzaEP5vawwDAYDVR0TBAUwAwEB/zAMBgNVHQ8EBQMD
BwYAMAsGCSqGSIb3DQEBCwOCAQEAGFvsWv35ipg0NNnq0x+e7Gtugn9OBhxkeTWo
Q1IUR7CL9zMRdlErIx5waptJhlPZFZANVpuvYa+yRz7oz2txH8yf/0N+F0bTeNU/
qZHenvp9RXzimxTFDoCkx7ESpW9b7IKSSZA6Zut6w7XzJeXRrNKfCSSrUGPfkCq4
hOtAm9QzUVE7eJ5a7T3+O50gZdoxjdojPhh9h5E1b+bmexrfQKlVl/gL+KPacBJD
bSxbiKECt5QGRdDGFFfoInhK1RiW7a/hQBhMWRsMiOFtu0YpfxfwIyIaK5QfHZBC
CC7JaJKg19njrnkjfmiBGoev7XiYWYt/WvYAiZR4nJn/cFrW1A==
-----END CERTIFICATE-----
EOF

  validity_period_hours = 12

  allowed_uses = [
    "server_auth",
  ]
}

resource "identitycloud_certificate_signing_request_response" "example" {
  certificate = tls_locally_signed_cert.example.cert_pem
  certificate_signing_request_id = identitycloud_certificate_signing_request_export.example.id
}
`
}

// Validate any computed values when applying minimal HCL
func certificateSigningRequestResponse_CheckComputedValuesMinimal() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("identitycloud_certificate_signing_request_response.example", "algorithm", "SHA256-RSA"),
		resource.TestCheckResourceAttrSet("identitycloud_certificate_signing_request_export.example", "created_date"),
		resource.TestCheckResourceAttrSet("identitycloud_certificate_signing_request_export.example", "id"),
		resource.TestCheckResourceAttrSet("identitycloud_certificate_signing_request_export.example", "created_date"),
		resource.TestCheckResourceAttrSet("identitycloud_certificate_signing_request_export.example", "request"),
		resource.TestCheckResourceAttr("identitycloud_certificate_signing_request_export.example", "subject", "C=US/O=Test Org/CN=Test CN"),
		resource.TestCheckResourceAttr("identitycloud_certificate_signing_request_export.example", "subject_alternative_names.#", "0"),
	)
}

// Validate any computed values when applying complete HCL
func certificateSigningRequestResponse_CheckComputedValuesComplete() resource.TestCheckFunc {
	return resource.ComposeTestCheckFunc(
		resource.TestCheckResourceAttr("identitycloud_certificate_signing_request_response.example", "algorithm", "SHA256-RSA"),
		resource.TestCheckResourceAttrSet("identitycloud_certificate_signing_request_export.example", "created_date"),
		resource.TestCheckResourceAttrSet("identitycloud_certificate_signing_request_export.example", "id"),
		resource.TestCheckResourceAttrSet("identitycloud_certificate_signing_request_export.example", "created_date"),
		resource.TestCheckResourceAttrSet("identitycloud_certificate_signing_request_export.example", "request"),
		resource.TestCheckResourceAttr("identitycloud_certificate_signing_request_export.example", "subject", "C=US/O=Second Test Org/CN=Second Test CN"),
		resource.TestCheckResourceAttr("identitycloud_certificate_signing_request_export.example", "subject_alternative_names.0", "example.com"),
	)
}

// Delete the certificate created by this resource
func certificateSigningRequestResponse_Delete(t *testing.T) {
	testClient := acctest.Client(nil)
	_, err := testClient.CertificatesAPI.DeleteCertificateByID(acctest.AuthContext(), certificateId).Execute()
	if err != nil {
		t.Fatalf("Failed to delete config: %v", err)
	}
}

// Test that any objects created by the test are destroyed
func certificateSigningRequestResponse_CheckDestroy(s *terraform.State) error {
	testClient := acctest.Client(nil)
	_, _, err := testClient.CertificatesAPI.GetCertificateByID(acctest.AuthContext(), certificateId).Execute()
	if err == nil {
		return fmt.Errorf("certificate_signing_request_response still exists after tests. Expected it to be destroyed")
	}
	return nil
}

// Get the certificate id from terraform state
func getCertificateId() resource.TestCheckFunc {
	return func(s *terraform.State) error {
		ms := s.RootModule()
		rs, ok := ms.Resources["identitycloud_certificate_signing_request_response.example"]
		if !ok {
			return errors.New("Not found: identitycloud_certificate_signing_request_response.example")
		}

		is := rs.Primary
		if is == nil {
			return errors.New("No primary instance found")
		}

		v, ok := is.Attributes["id"]

		if !ok {
			return errors.New("No id attribute found")
		}

		certificateId = v
		return nil
	}
}
