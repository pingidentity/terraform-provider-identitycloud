// Code generated by ping-terraform-plugin-framework-generator

package csrs

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	client "github.com/pingidentity/identitycloud-go-client/identitycloud"
	"github.com/pingidentity/terraform-provider-identitycloud/internal/auth"
	"github.com/pingidentity/terraform-provider-identitycloud/internal/providererror"
	internaltypes "github.com/pingidentity/terraform-provider-identitycloud/internal/types"
)

var (
	_ resource.Resource              = &certificateSigningRequestResponseResource{}
	_ resource.ResourceWithConfigure = &certificateSigningRequestResponseResource{}
)

func CertificateSigningRequestResponseResource() resource.Resource {
	return &certificateSigningRequestResponseResource{}
}

type certificateSigningRequestResponseResource struct {
	apiClient   *client.APIClient
	accessToken string
}

func (r *certificateSigningRequestResponseResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_certificate_signing_request_response"
}

func (r *certificateSigningRequestResponseResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	resourceConfig, ok := req.ProviderData.(internaltypes.ResourceConfiguration)
	if !ok {
		resp.Diagnostics.AddError(providererror.InternalProviderError, "Invalid ProviderData when configuring resource. Please report this error in the provider's issue tracker.")
		return
	}
	r.apiClient = resourceConfig.ApiClient
	r.accessToken = resourceConfig.AccessToken
}

type certificateSigningRequestResponseResourceModel struct {
	Algorithm                   types.String `tfsdk:"algorithm"`
	Certificate                 types.String `tfsdk:"certificate"`
	CertificateSigningRequestId types.String `tfsdk:"certificate_signing_request_id"`
	CreatedDate                 types.String `tfsdk:"created_date"`
	Id                          types.String `tfsdk:"id"`
	Request                     types.String `tfsdk:"request"`
	Subject                     types.String `tfsdk:"subject"`
	SubjectAlternativeNames     types.Set    `tfsdk:"subject_alternative_names"`
}

func (r *certificateSigningRequestResponseResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "Resource to upload a certificate to complete a certificate signing request, installing the certificate in the tenant.",
		Attributes: map[string]schema.Attribute{
			"algorithm": schema.StringAttribute{
				Computed:    true,
				Description: "The algorithm for the private key. The encryption algorithm will either be RSA-2048 or ECDSA P-256 depending on the algorithm choice. The default is `rsa`. Supported values are `rsa`, `ecdsa`.",
			},
			"certificate": schema.StringAttribute{
				Required:    true,
				Description: "The matching signed certificate for the certificate signing request.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"certificate_signing_request_id": schema.StringAttribute{
				Required:    true,
				Description: "The ID of the certificate signing request.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"created_date": schema.StringAttribute{
				Description: "The date the CSR was created",
				Computed:    true,
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: "The ID of the certificate created from the completed CSR.",
			},
			"request": schema.StringAttribute{
				Computed:    true,
				Description: "PEM formatted CSR.",
			},
			"subject": schema.StringAttribute{
				Computed:    true,
				Description: "The CSR subject",
			},
			"subject_alternative_names": schema.SetAttribute{
				ElementType: types.StringType,
				Computed:    true,
				Description: "Additional domain or domains that the SSL certificate is securing.",
			},
		},
	}
}

func (model *certificateSigningRequestResponseResourceModel) buildClientStruct() (*client.UpdateCertificateSigningRequestRequest, diag.Diagnostics) {
	result := &client.UpdateCertificateSigningRequestRequest{}
	// Certificate
	result.Certificate = model.Certificate.ValueString()
	return result, nil
}

func (state *certificateSigningRequestResponseResourceModel) readClientResponse(response *client.CertificateSigningRequest) diag.Diagnostics {
	var respDiags, diags diag.Diagnostics
	// algorithm
	state.Algorithm = types.StringPointerValue(response.Algorithm)
	// certificate_signing_request_id
	state.CertificateSigningRequestId = types.StringPointerValue(response.Id)
	// created_date
	state.CreatedDate = types.StringPointerValue(response.CreatedDate)
	// id
	state.Id = types.StringPointerValue(response.CertificateID)
	// request
	state.Request = types.StringPointerValue(response.Request)
	// subject
	state.Subject = types.StringPointerValue(response.Subject)
	// subject_alternative_names
	state.SubjectAlternativeNames, diags = types.SetValueFrom(context.Background(), types.StringType, response.SubjectAlternativeNames)
	respDiags.Append(diags...)
	return respDiags
}

func (r *certificateSigningRequestResponseResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data certificateSigningRequestResponseResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Create API call logic
	clientData, diags := data.buildClientStruct()
	resp.Diagnostics.Append(diags...)
	apiCreateRequest := r.apiClient.CSRsAPI.UpdateCertificateSigningRequestById(auth.AuthContext(ctx, r.accessToken), data.CertificateSigningRequestId.ValueString())
	apiCreateRequest = apiCreateRequest.Body(*clientData)
	responseData, httpResp, err := r.apiClient.CSRsAPI.UpdateCertificateSigningRequestByIdExecute(apiCreateRequest)
	if err != nil {
		providererror.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while uploading the certificate", err, httpResp)
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *certificateSigningRequestResponseResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data certificateSigningRequestResponseResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read API call logic
	// Ensure the resulting certificate still exists
	_, httpResp, err := r.apiClient.CertificatesAPI.GetCertificateByID(auth.AuthContext(ctx, r.accessToken), data.Id.ValueString()).Execute()
	if err != nil {
		if httpResp != nil && httpResp.StatusCode == 404 {
			providererror.AddResourceNotFoundWarning(ctx, &resp.Diagnostics, "certificate", httpResp)
			resp.State.RemoveResource(ctx)
		} else {
			providererror.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while reading the certificate", err, httpResp)
		}
		return
	}

	// Read the original CSR
	responseData, httpResp, err := r.apiClient.CSRsAPI.GetCertificateSigningRequestById(auth.AuthContext(ctx, r.accessToken), data.CertificateSigningRequestId.ValueString()).Execute()
	if err != nil {
		providererror.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while reading the certificateSigningRequest", err, httpResp)
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *certificateSigningRequestResponseResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	// This resource can't be updated after creation - all editable attributes should have RequiresReplace,
	// so this method will never be called
}

func (r *certificateSigningRequestResponseResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data certificateSigningRequestResponseResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Delete API call logic
	httpResp, err := r.apiClient.CertificatesAPI.DeleteCertificateByID(auth.AuthContext(ctx, r.accessToken), data.Id.ValueString()).Execute()
	if err != nil && (httpResp == nil || httpResp.StatusCode != 404) {
		providererror.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while deleting the certificate", err, httpResp)
	}
}
