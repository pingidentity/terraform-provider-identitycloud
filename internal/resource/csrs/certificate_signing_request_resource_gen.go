// Code generated by ping-terraform-plugin-framework-generator

package csrs

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	client "github.com/pingidentity/identitycloud-go-client/identitycloud"
	"github.com/pingidentity/terraform-provider-identitycloud/internal/auth"
	"github.com/pingidentity/terraform-provider-identitycloud/internal/providererror"
	internaltypes "github.com/pingidentity/terraform-provider-identitycloud/internal/types"
)

var (
	_ resource.Resource              = &certificateSigningRequestResource{}
	_ resource.ResourceWithConfigure = &certificateSigningRequestResource{}
)

func CertificateSigningRequestResource() resource.Resource {
	return &certificateSigningRequestResource{}
}

type certificateSigningRequestResource struct {
	apiClient   *client.APIClient
	accessToken string
}

func (r *certificateSigningRequestResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_certificate_signing_request"
}

func (r *certificateSigningRequestResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	resourceConfig, ok := req.ProviderData.(internaltypes.ResourceConfiguration)
	if !ok {
		resp.Diagnostics.AddError(providererror.InternalProviderError, "Invalid ProviderData when configuring resource. Please report this error in the provider's issue tracker.")
		return
	}
	r.apiClient = resourceConfig.ApiClient
	r.accessToken = resourceConfig.AccessToken
}

type certificateSigningRequestResourceModel struct {
	Algorithm               types.String `tfsdk:"algorithm"`
	BusinessCategory        types.String `tfsdk:"business_category"`
	CertificateId           types.String `tfsdk:"certificate_id"`
	City                    types.String `tfsdk:"city"`
	CommonName              types.String `tfsdk:"common_name"`
	Country                 types.String `tfsdk:"country"`
	CreatedDate             types.String `tfsdk:"created_date"`
	Email                   types.String `tfsdk:"email"`
	Id                      types.String `tfsdk:"id"`
	JurisdictionCity        types.String `tfsdk:"jurisdiction_city"`
	JurisdictionCountry     types.String `tfsdk:"jurisdiction_country"`
	JurisdictionState       types.String `tfsdk:"jurisdiction_state"`
	Organization            types.String `tfsdk:"organization"`
	OrganizationalUnit      types.String `tfsdk:"organizational_unit"`
	PostalCode              types.String `tfsdk:"postal_code"`
	Request                 types.String `tfsdk:"request"`
	SerialNumber            types.String `tfsdk:"serial_number"`
	State                   types.String `tfsdk:"state"`
	StreetAddress           types.String `tfsdk:"street_address"`
	Subject                 types.String `tfsdk:"subject"`
	SubjectAlternativeNames types.Set    `tfsdk:"subject_alternative_names"`
}

func (r *certificateSigningRequestResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "Resource to create and manage a certificate signing request.",
		Attributes: map[string]schema.Attribute{
			"algorithm": schema.StringAttribute{
				Optional:    true,
				Computed:    true,
				Default:     stringdefault.StaticString("rsa"),
				Description: "The algorithm for the private key. The encryption algorithm will either be RSA-2048 or ECDSA P-256 depending on the algorithm choice. The default is `rsa`. Supported values are `rsa`, `ecdsa`.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.OneOf(
						"rsa",
						"ecdsa",
					),
				},
			},
			"business_category": schema.StringAttribute{
				Optional:    true,
				Description: "Category of business, such as \"Private Organization\", “Government Entity”, “Business Entity”, or “Non-Commercial Entity”. Relevant for EV certificates.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"certificate_id": schema.StringAttribute{
				Computed:    true,
				Description: "The ID of the certificate created from this CSR if the CSR has been completed.",
			},
			"city": schema.StringAttribute{
				Optional:    true,
				Description: "City for the CSR",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"common_name": schema.StringAttribute{
				Optional:    true,
				Description: "Domain name that the SSL certificate is securing",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"country": schema.StringAttribute{
				Optional:    true,
				Description: "Two-letter ISO-3166 country code",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("[A-Z]{2}"), ""),
				},
			},
			"created_date": schema.StringAttribute{
				Description: "The date the CSR was created",
				Computed:    true,
			},
			"email": schema.StringAttribute{
				Optional:    true,
				Description: "Email for the CSR",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile(`^\S+@\S+$`), ""),
				},
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: "The unique identifier for the CSR",
			},
			"jurisdiction_city": schema.StringAttribute{
				Optional:    true,
				Description: "This field contains only information relevant to the Jurisdiction of Incorporation or Registration. Relevant for EV certificates.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"jurisdiction_country": schema.StringAttribute{
				Optional:    true,
				Description: "This field contains only information relevant to the Jurisdiction of Incorporation or Registration. Relevant for EV certificates.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"jurisdiction_state": schema.StringAttribute{
				Optional:    true,
				Description: "This field contains only information relevant to the Jurisdiction of Incorporation or Registration. Relevant for EV certificates.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"organization": schema.StringAttribute{
				Optional:    true,
				Description: "Full name of company",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"organizational_unit": schema.StringAttribute{
				Optional:    true,
				Description: "Company section or department",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"postal_code": schema.StringAttribute{
				Optional:    true,
				Description: "Postal code for the CSR",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"request": schema.StringAttribute{
				Computed:    true,
				Description: "PEM formatted CSR.",
			},
			"serial_number": schema.StringAttribute{
				Optional:    true,
				Description: "The Registration (or similar) Number assigned to the Subject by the Incorporating or Registration Agency in its Jurisdiction of Incorporation or Registration. Relevant for EV certificates.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"state": schema.StringAttribute{
				Optional:    true,
				Description: "State for the CSR",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"street_address": schema.StringAttribute{
				Optional:    true,
				Description: "Street address for the CSR",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"subject": schema.StringAttribute{
				Computed:    true,
				Description: "The CSR subject",
			},
			"subject_alternative_names": schema.SetAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Description: "Additional domain or domains that the SSL certificate is securing.",
				PlanModifiers: []planmodifier.Set{
					setplanmodifier.RequiresReplace(),
				},
			},
		},
	}
}

func (model *certificateSigningRequestResourceModel) buildClientStruct() (*client.CreateCertificateSigningRequestRequest, diag.Diagnostics) {
	result := &client.CreateCertificateSigningRequestRequest{}
	// algorithm
	result.Algorithm = model.Algorithm.ValueStringPointer()
	// business_category
	result.BusinessCategory = model.BusinessCategory.ValueStringPointer()
	// city
	result.City = model.City.ValueStringPointer()
	// common_name
	result.CommonName = model.CommonName.ValueStringPointer()
	// country
	result.Country = model.Country.ValueStringPointer()
	// email
	result.Email = model.Email.ValueStringPointer()
	// jurisdiction_city
	result.JurisdictionCity = model.JurisdictionCity.ValueStringPointer()
	// jurisdiction_country
	result.JurisdictionCountry = model.JurisdictionCountry.ValueStringPointer()
	// jurisdiction_state
	result.JurisdictionState = model.JurisdictionState.ValueStringPointer()
	// organization
	result.Organization = model.Organization.ValueStringPointer()
	// organizational_unit
	result.OrganizationalUnit = model.OrganizationalUnit.ValueStringPointer()
	// postal_code
	result.PostalCode = model.PostalCode.ValueStringPointer()
	// serial_number
	result.SerialNumber = model.SerialNumber.ValueStringPointer()
	// state
	result.State = model.State.ValueStringPointer()
	// street_address
	result.StreetAddress = model.StreetAddress.ValueStringPointer()
	// subject_alternative_names
	if !model.SubjectAlternativeNames.IsNull() {
		result.SubjectAlternativeNames = []string{}
		for _, subjectAlternativeNamesElement := range model.SubjectAlternativeNames.Elements() {
			result.SubjectAlternativeNames = append(result.SubjectAlternativeNames, subjectAlternativeNamesElement.(types.String).ValueString())
		}
	}

	return result, nil
}

func (state *certificateSigningRequestResourceModel) readClientResponse(response *client.CertificateSigningRequest) diag.Diagnostics {
	var respDiags, diags diag.Diagnostics
	// certificate_id
	state.CertificateId = types.StringPointerValue(response.CertificateID)
	// created_date
	state.CreatedDate = types.StringPointerValue(response.CreatedDate)
	// id
	state.Id = types.StringPointerValue(response.Id)
	// request
	state.Request = types.StringPointerValue(response.Request)
	// subject
	state.Subject = types.StringPointerValue(response.Subject)
	// subject_alternative_names
	state.SubjectAlternativeNames, diags = types.SetValueFrom(context.Background(), types.StringType, response.SubjectAlternativeNames)
	respDiags.Append(diags...)
	return respDiags
}

func (r *certificateSigningRequestResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data certificateSigningRequestResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Create API call logic
	clientData, diags := data.buildClientStruct()
	resp.Diagnostics.Append(diags...)
	apiCreateRequest := r.apiClient.CSRsAPI.CreateCertificateSigningRequest(auth.AuthContext(ctx, r.accessToken))
	apiCreateRequest = apiCreateRequest.Body(*clientData)
	responseData, httpResp, err := r.apiClient.CSRsAPI.CreateCertificateSigningRequestExecute(apiCreateRequest)
	if err != nil {
		providererror.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while creating the certificateSigningRequest", err, httpResp)
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *certificateSigningRequestResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data certificateSigningRequestResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Read API call logic
	responseData, httpResp, err := r.apiClient.CSRsAPI.GetCertificateSigningRequestById(auth.AuthContext(ctx, r.accessToken), data.Id.ValueString()).Execute()
	if err != nil {
		if httpResp != nil && httpResp.StatusCode == 404 {
			providererror.AddResourceNotFoundWarning(ctx, &resp.Diagnostics, "certificateSigningRequest", httpResp)
			resp.State.RemoveResource(ctx)
		} else {
			providererror.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while reading the certificateSigningRequest", err, httpResp)
		}
		return
	}

	// Read response into the model
	resp.Diagnostics.Append(data.readClientResponse(responseData)...)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *certificateSigningRequestResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	// This resource can't be updated after creation - all editable attributes should have RequiresReplace,
	// so this method will never be called
}

func (r *certificateSigningRequestResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data certificateSigningRequestResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Delete API call logic
	httpResp, err := r.apiClient.CSRsAPI.DeleteCertificateSigningRequestById(auth.AuthContext(ctx, r.accessToken), data.Id.ValueString()).Execute()
	if err != nil && (httpResp == nil || httpResp.StatusCode != 404) {
		providererror.ReportHttpError(ctx, &resp.Diagnostics, "An error occurred while deleting the certificateSigningRequest", err, httpResp)
	}
}
